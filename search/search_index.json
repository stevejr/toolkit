{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"GitOps Toolkit \u00b6 The GitOps Toolkit is a set of composable APIs and specialized tools that can be used to build a Continuous Delivery platform on top of Kubernetes. These tools are built with Kubernetes controller-runtime libraries and they can be dynamically configured with Kubernetes custom resources either by cluster admins or by other automated tools. The GitOps Toolkit components interact with each other via Kubernetes events and are responsible for the reconciliation of their designated API objects. Work in Progress We envision a future where Flux v2 and Helm Operator v2 will be assembled from the GitOps Toolkit components. The Flux CD team is looking for feedback and help as the toolkit is in an active experimentation phase. If you wish to take part in this quest please reach out to us on Slack and GitHub. Target features: Source management Kustomize and Helm support Event-based and on-a-schedule reconciliation Role-based reconciliation (multi-tenancy) Health assessment (clusters and workloads) Dependency management (infra and workloads) Alerting to external systems (webhook senders) External events handling (webhook receivers) Source write-back (automated patching) Policy driven validation (OPA, admission controllers) Seamless integration with Git providers (GitHub, GitLab, BitBucket) Interoperability with workflow providers (GitHub Actions, Tekton, Argo) Interoperability with CAPI providers Components: Toolkit CLI Source Controller GitRepository CRD HelmRepository CRD Kustomize Controller Kustomization CRD Helm Controller (TBA) To get started with the toolkit please follow this guide .","title":"Introduction"},{"location":"#gitops-toolkit","text":"The GitOps Toolkit is a set of composable APIs and specialized tools that can be used to build a Continuous Delivery platform on top of Kubernetes. These tools are built with Kubernetes controller-runtime libraries and they can be dynamically configured with Kubernetes custom resources either by cluster admins or by other automated tools. The GitOps Toolkit components interact with each other via Kubernetes events and are responsible for the reconciliation of their designated API objects. Work in Progress We envision a future where Flux v2 and Helm Operator v2 will be assembled from the GitOps Toolkit components. The Flux CD team is looking for feedback and help as the toolkit is in an active experimentation phase. If you wish to take part in this quest please reach out to us on Slack and GitHub. Target features: Source management Kustomize and Helm support Event-based and on-a-schedule reconciliation Role-based reconciliation (multi-tenancy) Health assessment (clusters and workloads) Dependency management (infra and workloads) Alerting to external systems (webhook senders) External events handling (webhook receivers) Source write-back (automated patching) Policy driven validation (OPA, admission controllers) Seamless integration with Git providers (GitHub, GitLab, BitBucket) Interoperability with workflow providers (GitHub Actions, Tekton, Argo) Interoperability with CAPI providers Components: Toolkit CLI Source Controller GitRepository CRD HelmRepository CRD Kustomize Controller Kustomization CRD Helm Controller (TBA) To get started with the toolkit please follow this guide .","title":"GitOps Toolkit"},{"location":"cmd/tk/","text":"tk \u00b6 Command line utility for assembling Kubernetes CD pipelines Synopsis \u00b6 Command line utility for assembling Kubernetes CD pipelines the GitOps way. Examples \u00b6 # Check prerequisites tk check --pre # Install the latest version of the toolkit tk install --version=master # Create a source from a public Git repository tk create source git webapp-latest \\ --url=https://github.com/stefanprodan/podinfo \\ --branch=master \\ --interval=3m # List git sources and their status tk get sources git # Trigger a git sync tk sync source git webapp-latest # Export git sources in YAML format tk export source git --all > sources.yaml # Create a kustomization for deploying a series of microservices tk create kustomization webapp-dev \\ --source=webapp-latest \\ --path=\"./deploy/webapp/\" \\ --prune=true \\ --interval=5m \\ --validate=client \\ --health-check=\"Deployment/backend.webapp\" \\ --health-check=\"Deployment/frontend.webapp\" \\ --health-check-timeout=2m # Trigger a git sync and apply changes if any tk sync kustomization webapp-dev --with-source # Suspend a kustomization reconciliation tk suspend kustomization webapp-dev # Export kustomizations in YAML format tk export kustomization --all > kustomizations.yaml # Resume a kustomization reconciliation tk resume kustomization webapp-dev # Delete a kustomization tk delete kustomization webapp-dev # Delete a git source tk delete source git webapp-latest # Uninstall the toolkit and delete CRDs tk uninstall --crds Options \u00b6 --components strings list of components, accepts comma-separated values (default [source-controller,kustomize-controller]) -h, --help help for tk --kubeconfig string path to the kubeconfig file (default \"~/.kube/config\") --namespace string the namespace scope for this operation (default \"gitops-system\") --timeout duration timeout for this operation (default 5m0s) --verbose print generated objects SEE ALSO \u00b6 tk bootstrap - Bootstrap commands tk check - Check requirements and installation tk completion - Generates bash completion scripts tk create - Create commands tk delete - Delete commands tk export - Export commands tk get - Get commands tk install - Install the toolkit components tk resume - Resume commands tk suspend - Suspend commands tk sync - Synchronize commands tk uninstall - Uninstall the toolkit components","title":"Overview"},{"location":"cmd/tk/#tk","text":"Command line utility for assembling Kubernetes CD pipelines","title":"tk"},{"location":"cmd/tk/#synopsis","text":"Command line utility for assembling Kubernetes CD pipelines the GitOps way.","title":"Synopsis"},{"location":"cmd/tk/#examples","text":"# Check prerequisites tk check --pre # Install the latest version of the toolkit tk install --version=master # Create a source from a public Git repository tk create source git webapp-latest \\ --url=https://github.com/stefanprodan/podinfo \\ --branch=master \\ --interval=3m # List git sources and their status tk get sources git # Trigger a git sync tk sync source git webapp-latest # Export git sources in YAML format tk export source git --all > sources.yaml # Create a kustomization for deploying a series of microservices tk create kustomization webapp-dev \\ --source=webapp-latest \\ --path=\"./deploy/webapp/\" \\ --prune=true \\ --interval=5m \\ --validate=client \\ --health-check=\"Deployment/backend.webapp\" \\ --health-check=\"Deployment/frontend.webapp\" \\ --health-check-timeout=2m # Trigger a git sync and apply changes if any tk sync kustomization webapp-dev --with-source # Suspend a kustomization reconciliation tk suspend kustomization webapp-dev # Export kustomizations in YAML format tk export kustomization --all > kustomizations.yaml # Resume a kustomization reconciliation tk resume kustomization webapp-dev # Delete a kustomization tk delete kustomization webapp-dev # Delete a git source tk delete source git webapp-latest # Uninstall the toolkit and delete CRDs tk uninstall --crds","title":"Examples"},{"location":"cmd/tk/#options","text":"--components strings list of components, accepts comma-separated values (default [source-controller,kustomize-controller]) -h, --help help for tk --kubeconfig string path to the kubeconfig file (default \"~/.kube/config\") --namespace string the namespace scope for this operation (default \"gitops-system\") --timeout duration timeout for this operation (default 5m0s) --verbose print generated objects","title":"Options"},{"location":"cmd/tk/#see-also","text":"tk bootstrap - Bootstrap commands tk check - Check requirements and installation tk completion - Generates bash completion scripts tk create - Create commands tk delete - Delete commands tk export - Export commands tk get - Get commands tk install - Install the toolkit components tk resume - Resume commands tk suspend - Suspend commands tk sync - Synchronize commands tk uninstall - Uninstall the toolkit components","title":"SEE ALSO"},{"location":"cmd/tk_bootstrap/","text":"tk bootstrap \u00b6 Bootstrap commands Synopsis \u00b6 Bootstrap commands Options \u00b6 -h, --help help for bootstrap --version string toolkit tag or branch (default \"master\") Options inherited from parent commands \u00b6 --components strings list of components, accepts comma-separated values (default [source-controller,kustomize-controller]) --kubeconfig string path to the kubeconfig file (default \"~/.kube/config\") --namespace string the namespace scope for this operation (default \"gitops-system\") --timeout duration timeout for this operation (default 5m0s) --verbose print generated objects SEE ALSO \u00b6 tk - Command line utility for assembling Kubernetes CD pipelines tk bootstrap github - Bootstrap GitHub repository tk bootstrap gitlab - Bootstrap GitLab repository","title":"Bootstrap"},{"location":"cmd/tk_bootstrap/#tk-bootstrap","text":"Bootstrap commands","title":"tk bootstrap"},{"location":"cmd/tk_bootstrap/#synopsis","text":"Bootstrap commands","title":"Synopsis"},{"location":"cmd/tk_bootstrap/#options","text":"-h, --help help for bootstrap --version string toolkit tag or branch (default \"master\")","title":"Options"},{"location":"cmd/tk_bootstrap/#options-inherited-from-parent-commands","text":"--components strings list of components, accepts comma-separated values (default [source-controller,kustomize-controller]) --kubeconfig string path to the kubeconfig file (default \"~/.kube/config\") --namespace string the namespace scope for this operation (default \"gitops-system\") --timeout duration timeout for this operation (default 5m0s) --verbose print generated objects","title":"Options inherited from parent commands"},{"location":"cmd/tk_bootstrap/#see-also","text":"tk - Command line utility for assembling Kubernetes CD pipelines tk bootstrap github - Bootstrap GitHub repository tk bootstrap gitlab - Bootstrap GitLab repository","title":"SEE ALSO"},{"location":"cmd/tk_bootstrap_github/","text":"tk bootstrap github \u00b6 Bootstrap GitHub repository Synopsis \u00b6 The bootstrap command creates the GitHub repository if it doesn't exists and commits the toolkit components manifests to the master branch. Then it configure the target cluster to synchronize with the repository. If the toolkit components are present on the cluster, the bootstrap command will perform an upgrade if needed. tk bootstrap github [flags] Examples \u00b6 # Create a GitHub personal access token and export it as an env var export GITHUB_TOKEN=<my-token> # Run bootstrap for a private repo owned by a GitHub organization bootstrap github --owner=<organization> --repository=<repo name> # Run bootstrap for a private repo and assign organization teams to it bootstrap github --owner=<organization> --repository=<repo name> --team=<team1 slug> --team=<team2 slug> # Run bootstrap for a repository path bootstrap github --owner=<organization> --repository=<repo name> --path=dev-cluster # Run bootstrap for a public repository on a personal account bootstrap github --owner=<user> --repository=<repo name> --private=false --personal=true # Run bootstrap for a private repo hosted on GitHub Enterprise bootstrap github --owner=<organization> --repository=<repo name> --hostname=<domain> Options \u00b6 -h, --help help for github --hostname string GitHub hostname (default \"github.com\") --interval duration sync interval (default 1m0s) --owner string GitHub user or organization name --path string repository path, when specified the cluster sync will be scoped to this path --personal is personal repository --private is private repository (default true) --repository string GitHub repository name --team stringArray GitHub team to be given maintainer access Options inherited from parent commands \u00b6 --components strings list of components, accepts comma-separated values (default [source-controller,kustomize-controller]) --kubeconfig string path to the kubeconfig file (default \"~/.kube/config\") --namespace string the namespace scope for this operation (default \"gitops-system\") --timeout duration timeout for this operation (default 5m0s) --verbose print generated objects --version string toolkit tag or branch (default \"master\") SEE ALSO \u00b6 tk bootstrap - Bootstrap commands","title":"Bootstrap github"},{"location":"cmd/tk_bootstrap_github/#tk-bootstrap-github","text":"Bootstrap GitHub repository","title":"tk bootstrap github"},{"location":"cmd/tk_bootstrap_github/#synopsis","text":"The bootstrap command creates the GitHub repository if it doesn't exists and commits the toolkit components manifests to the master branch. Then it configure the target cluster to synchronize with the repository. If the toolkit components are present on the cluster, the bootstrap command will perform an upgrade if needed. tk bootstrap github [flags]","title":"Synopsis"},{"location":"cmd/tk_bootstrap_github/#examples","text":"# Create a GitHub personal access token and export it as an env var export GITHUB_TOKEN=<my-token> # Run bootstrap for a private repo owned by a GitHub organization bootstrap github --owner=<organization> --repository=<repo name> # Run bootstrap for a private repo and assign organization teams to it bootstrap github --owner=<organization> --repository=<repo name> --team=<team1 slug> --team=<team2 slug> # Run bootstrap for a repository path bootstrap github --owner=<organization> --repository=<repo name> --path=dev-cluster # Run bootstrap for a public repository on a personal account bootstrap github --owner=<user> --repository=<repo name> --private=false --personal=true # Run bootstrap for a private repo hosted on GitHub Enterprise bootstrap github --owner=<organization> --repository=<repo name> --hostname=<domain>","title":"Examples"},{"location":"cmd/tk_bootstrap_github/#options","text":"-h, --help help for github --hostname string GitHub hostname (default \"github.com\") --interval duration sync interval (default 1m0s) --owner string GitHub user or organization name --path string repository path, when specified the cluster sync will be scoped to this path --personal is personal repository --private is private repository (default true) --repository string GitHub repository name --team stringArray GitHub team to be given maintainer access","title":"Options"},{"location":"cmd/tk_bootstrap_github/#options-inherited-from-parent-commands","text":"--components strings list of components, accepts comma-separated values (default [source-controller,kustomize-controller]) --kubeconfig string path to the kubeconfig file (default \"~/.kube/config\") --namespace string the namespace scope for this operation (default \"gitops-system\") --timeout duration timeout for this operation (default 5m0s) --verbose print generated objects --version string toolkit tag or branch (default \"master\")","title":"Options inherited from parent commands"},{"location":"cmd/tk_bootstrap_github/#see-also","text":"tk bootstrap - Bootstrap commands","title":"SEE ALSO"},{"location":"cmd/tk_bootstrap_gitlab/","text":"tk bootstrap gitlab \u00b6 Bootstrap GitLab repository Synopsis \u00b6 The bootstrap command creates the GitLab repository if it doesn't exists and commits the toolkit components manifests to the master branch. Then it configure the target cluster to synchronize with the repository. If the toolkit components are present on the cluster, the bootstrap command will perform an upgrade if needed. tk bootstrap gitlab [flags] Examples \u00b6 # Create a GitLab API token and export it as an env var export GITLAB_TOKEN=<my-token> # Run bootstrap for a private repo owned by a GitLab group bootstrap gitlab --owner=<group> --repository=<repo name> # Run bootstrap for a repository path bootstrap gitlab --owner=<group> --repository=<repo name> --path=dev-cluster # Run bootstrap for a public repository on a personal account bootstrap gitlab --owner=<user> --repository=<repo name> --private=false --personal=true # Run bootstrap for a private repo hosted on a GitLab server bootstrap gitlab --owner=<group> --repository=<repo name> --hostname=<domain> Options \u00b6 -h, --help help for gitlab --hostname string GitLab hostname (default \"gitlab.com\") --interval duration sync interval (default 1m0s) --owner string GitLab user or group name --path string repository path, when specified the cluster sync will be scoped to this path --personal is personal repository --private is private repository (default true) --repository string GitLab repository name Options inherited from parent commands \u00b6 --components strings list of components, accepts comma-separated values (default [source-controller,kustomize-controller]) --kubeconfig string path to the kubeconfig file (default \"~/.kube/config\") --namespace string the namespace scope for this operation (default \"gitops-system\") --timeout duration timeout for this operation (default 5m0s) --verbose print generated objects --version string toolkit tag or branch (default \"master\") SEE ALSO \u00b6 tk bootstrap - Bootstrap commands","title":"Bootstrap gitlab"},{"location":"cmd/tk_bootstrap_gitlab/#tk-bootstrap-gitlab","text":"Bootstrap GitLab repository","title":"tk bootstrap gitlab"},{"location":"cmd/tk_bootstrap_gitlab/#synopsis","text":"The bootstrap command creates the GitLab repository if it doesn't exists and commits the toolkit components manifests to the master branch. Then it configure the target cluster to synchronize with the repository. If the toolkit components are present on the cluster, the bootstrap command will perform an upgrade if needed. tk bootstrap gitlab [flags]","title":"Synopsis"},{"location":"cmd/tk_bootstrap_gitlab/#examples","text":"# Create a GitLab API token and export it as an env var export GITLAB_TOKEN=<my-token> # Run bootstrap for a private repo owned by a GitLab group bootstrap gitlab --owner=<group> --repository=<repo name> # Run bootstrap for a repository path bootstrap gitlab --owner=<group> --repository=<repo name> --path=dev-cluster # Run bootstrap for a public repository on a personal account bootstrap gitlab --owner=<user> --repository=<repo name> --private=false --personal=true # Run bootstrap for a private repo hosted on a GitLab server bootstrap gitlab --owner=<group> --repository=<repo name> --hostname=<domain>","title":"Examples"},{"location":"cmd/tk_bootstrap_gitlab/#options","text":"-h, --help help for gitlab --hostname string GitLab hostname (default \"gitlab.com\") --interval duration sync interval (default 1m0s) --owner string GitLab user or group name --path string repository path, when specified the cluster sync will be scoped to this path --personal is personal repository --private is private repository (default true) --repository string GitLab repository name","title":"Options"},{"location":"cmd/tk_bootstrap_gitlab/#options-inherited-from-parent-commands","text":"--components strings list of components, accepts comma-separated values (default [source-controller,kustomize-controller]) --kubeconfig string path to the kubeconfig file (default \"~/.kube/config\") --namespace string the namespace scope for this operation (default \"gitops-system\") --timeout duration timeout for this operation (default 5m0s) --verbose print generated objects --version string toolkit tag or branch (default \"master\")","title":"Options inherited from parent commands"},{"location":"cmd/tk_bootstrap_gitlab/#see-also","text":"tk bootstrap - Bootstrap commands","title":"SEE ALSO"},{"location":"cmd/tk_check/","text":"tk check \u00b6 Check requirements and installation Synopsis \u00b6 The check command will perform a series of checks to validate that the local environment is configured correctly and if the installed components are healthy. tk check [flags] Examples \u00b6 # Run pre-installation checks check --pre # Run installation checks check Options \u00b6 -h, --help help for check --pre only run pre-installation checks Options inherited from parent commands \u00b6 --components strings list of components, accepts comma-separated values (default [source-controller,kustomize-controller]) --kubeconfig string path to the kubeconfig file (default \"~/.kube/config\") --namespace string the namespace scope for this operation (default \"gitops-system\") --timeout duration timeout for this operation (default 5m0s) --verbose print generated objects SEE ALSO \u00b6 tk - Command line utility for assembling Kubernetes CD pipelines","title":"Check"},{"location":"cmd/tk_check/#tk-check","text":"Check requirements and installation","title":"tk check"},{"location":"cmd/tk_check/#synopsis","text":"The check command will perform a series of checks to validate that the local environment is configured correctly and if the installed components are healthy. tk check [flags]","title":"Synopsis"},{"location":"cmd/tk_check/#examples","text":"# Run pre-installation checks check --pre # Run installation checks check","title":"Examples"},{"location":"cmd/tk_check/#options","text":"-h, --help help for check --pre only run pre-installation checks","title":"Options"},{"location":"cmd/tk_check/#options-inherited-from-parent-commands","text":"--components strings list of components, accepts comma-separated values (default [source-controller,kustomize-controller]) --kubeconfig string path to the kubeconfig file (default \"~/.kube/config\") --namespace string the namespace scope for this operation (default \"gitops-system\") --timeout duration timeout for this operation (default 5m0s) --verbose print generated objects","title":"Options inherited from parent commands"},{"location":"cmd/tk_check/#see-also","text":"tk - Command line utility for assembling Kubernetes CD pipelines","title":"SEE ALSO"},{"location":"cmd/tk_completion/","text":"tk completion \u00b6 Generates bash completion scripts Synopsis \u00b6 Generates bash completion scripts tk completion [flags] Examples \u00b6 To load completion run . <(tk completion) To configure your bash shell to load completions for each session add to your bashrc # ~/.bashrc or ~/.profile . <(tk completion) Options \u00b6 -h, --help help for completion Options inherited from parent commands \u00b6 --components strings list of components, accepts comma-separated values (default [source-controller,kustomize-controller]) --kubeconfig string path to the kubeconfig file (default \"~/.kube/config\") --namespace string the namespace scope for this operation (default \"gitops-system\") --timeout duration timeout for this operation (default 5m0s) --verbose print generated objects SEE ALSO \u00b6 tk - Command line utility for assembling Kubernetes CD pipelines","title":"Tk completion"},{"location":"cmd/tk_completion/#tk-completion","text":"Generates bash completion scripts","title":"tk completion"},{"location":"cmd/tk_completion/#synopsis","text":"Generates bash completion scripts tk completion [flags]","title":"Synopsis"},{"location":"cmd/tk_completion/#examples","text":"To load completion run . <(tk completion) To configure your bash shell to load completions for each session add to your bashrc # ~/.bashrc or ~/.profile . <(tk completion)","title":"Examples"},{"location":"cmd/tk_completion/#options","text":"-h, --help help for completion","title":"Options"},{"location":"cmd/tk_completion/#options-inherited-from-parent-commands","text":"--components strings list of components, accepts comma-separated values (default [source-controller,kustomize-controller]) --kubeconfig string path to the kubeconfig file (default \"~/.kube/config\") --namespace string the namespace scope for this operation (default \"gitops-system\") --timeout duration timeout for this operation (default 5m0s) --verbose print generated objects","title":"Options inherited from parent commands"},{"location":"cmd/tk_completion/#see-also","text":"tk - Command line utility for assembling Kubernetes CD pipelines","title":"SEE ALSO"},{"location":"cmd/tk_create/","text":"tk create \u00b6 Create commands Synopsis \u00b6 Create commands Options \u00b6 --export export in yaml format to stdout -h, --help help for create --interval duration source sync interval (default 1m0s) Options inherited from parent commands \u00b6 --components strings list of components, accepts comma-separated values (default [source-controller,kustomize-controller]) --kubeconfig string path to the kubeconfig file (default \"~/.kube/config\") --namespace string the namespace scope for this operation (default \"gitops-system\") --timeout duration timeout for this operation (default 5m0s) --verbose print generated objects SEE ALSO \u00b6 tk - Command line utility for assembling Kubernetes CD pipelines tk create kustomization - Create or update a kustomization resource tk create source - Create source commands","title":"Create"},{"location":"cmd/tk_create/#tk-create","text":"Create commands","title":"tk create"},{"location":"cmd/tk_create/#synopsis","text":"Create commands","title":"Synopsis"},{"location":"cmd/tk_create/#options","text":"--export export in yaml format to stdout -h, --help help for create --interval duration source sync interval (default 1m0s)","title":"Options"},{"location":"cmd/tk_create/#options-inherited-from-parent-commands","text":"--components strings list of components, accepts comma-separated values (default [source-controller,kustomize-controller]) --kubeconfig string path to the kubeconfig file (default \"~/.kube/config\") --namespace string the namespace scope for this operation (default \"gitops-system\") --timeout duration timeout for this operation (default 5m0s) --verbose print generated objects","title":"Options inherited from parent commands"},{"location":"cmd/tk_create/#see-also","text":"tk - Command line utility for assembling Kubernetes CD pipelines tk create kustomization - Create or update a kustomization resource tk create source - Create source commands","title":"SEE ALSO"},{"location":"cmd/tk_create_kustomization/","text":"tk create kustomization \u00b6 Create or update a kustomization resource Synopsis \u00b6 The kustomization source command generates a kustomization.kustomize.fluxcd.io resource for a given GitRepository source. API spec: https://github.com/fluxcd/kustomize-controller/tree/master/docs/spec/v1alpha1 tk create kustomization [name] [flags] Examples \u00b6 # Create a kustomization from a source at a given path create kustomization contour \\ --source=contour \\ --path=\"./examples/contour/\" \\ --prune=true \\ --interval=10m \\ --validate=client \\ --health-check=\"Deployment/contour.projectcontour\" \\ --health-check=\"DaemonSet/envoy.projectcontour\" \\ --health-check-timeout=3m # Create a kustomization that depends on the previous one create kustomization webapp \\ --depends-on=contour \\ --source=webapp \\ --path=\"./deploy/overlays/dev\" \\ --prune=true \\ --interval=5m \\ --validate=client # Create a kustomization that runs under a service account create kustomization webapp \\ --source=webapp \\ --path=\"./deploy/overlays/staging\" \\ --prune=true \\ --interval=5m \\ --validate=client \\ --sa-name=reconclier \\ --sa-namespace=staging Options \u00b6 --depends-on stringArray kustomization that must be ready before this kustomization can be applied --health-check stringArray workload to be included in the health assessment, in the format '<kind>/<name>.<namespace>' --health-check-timeout duration timeout of health checking operations (default 2m0s) -h, --help help for kustomization --path string path to the directory containing the kustomization file (default \"./\") --prune enable garbage collection --sa-name string service account name --sa-namespace string service account namespace --source string GitRepository name --validate string validate the manifests before applying them on the cluster, can be 'client' or 'server' Options inherited from parent commands \u00b6 --components strings list of components, accepts comma-separated values (default [source-controller,kustomize-controller]) --export export in yaml format to stdout --interval duration source sync interval (default 1m0s) --kubeconfig string path to the kubeconfig file (default \"~/.kube/config\") --namespace string the namespace scope for this operation (default \"gitops-system\") --timeout duration timeout for this operation (default 5m0s) --verbose print generated objects SEE ALSO \u00b6 tk create - Create commands","title":"Create kustomization"},{"location":"cmd/tk_create_kustomization/#tk-create-kustomization","text":"Create or update a kustomization resource","title":"tk create kustomization"},{"location":"cmd/tk_create_kustomization/#synopsis","text":"The kustomization source command generates a kustomization.kustomize.fluxcd.io resource for a given GitRepository source. API spec: https://github.com/fluxcd/kustomize-controller/tree/master/docs/spec/v1alpha1 tk create kustomization [name] [flags]","title":"Synopsis"},{"location":"cmd/tk_create_kustomization/#examples","text":"# Create a kustomization from a source at a given path create kustomization contour \\ --source=contour \\ --path=\"./examples/contour/\" \\ --prune=true \\ --interval=10m \\ --validate=client \\ --health-check=\"Deployment/contour.projectcontour\" \\ --health-check=\"DaemonSet/envoy.projectcontour\" \\ --health-check-timeout=3m # Create a kustomization that depends on the previous one create kustomization webapp \\ --depends-on=contour \\ --source=webapp \\ --path=\"./deploy/overlays/dev\" \\ --prune=true \\ --interval=5m \\ --validate=client # Create a kustomization that runs under a service account create kustomization webapp \\ --source=webapp \\ --path=\"./deploy/overlays/staging\" \\ --prune=true \\ --interval=5m \\ --validate=client \\ --sa-name=reconclier \\ --sa-namespace=staging","title":"Examples"},{"location":"cmd/tk_create_kustomization/#options","text":"--depends-on stringArray kustomization that must be ready before this kustomization can be applied --health-check stringArray workload to be included in the health assessment, in the format '<kind>/<name>.<namespace>' --health-check-timeout duration timeout of health checking operations (default 2m0s) -h, --help help for kustomization --path string path to the directory containing the kustomization file (default \"./\") --prune enable garbage collection --sa-name string service account name --sa-namespace string service account namespace --source string GitRepository name --validate string validate the manifests before applying them on the cluster, can be 'client' or 'server'","title":"Options"},{"location":"cmd/tk_create_kustomization/#options-inherited-from-parent-commands","text":"--components strings list of components, accepts comma-separated values (default [source-controller,kustomize-controller]) --export export in yaml format to stdout --interval duration source sync interval (default 1m0s) --kubeconfig string path to the kubeconfig file (default \"~/.kube/config\") --namespace string the namespace scope for this operation (default \"gitops-system\") --timeout duration timeout for this operation (default 5m0s) --verbose print generated objects","title":"Options inherited from parent commands"},{"location":"cmd/tk_create_kustomization/#see-also","text":"tk create - Create commands","title":"SEE ALSO"},{"location":"cmd/tk_create_source/","text":"tk create source \u00b6 Create source commands Synopsis \u00b6 Create source commands Options \u00b6 -h, --help help for source Options inherited from parent commands \u00b6 --components strings list of components, accepts comma-separated values (default [source-controller,kustomize-controller]) --export export in yaml format to stdout --interval duration source sync interval (default 1m0s) --kubeconfig string path to the kubeconfig file (default \"~/.kube/config\") --namespace string the namespace scope for this operation (default \"gitops-system\") --timeout duration timeout for this operation (default 5m0s) --verbose print generated objects SEE ALSO \u00b6 tk create - Create commands tk create source git - Create or update a git source","title":"Create source"},{"location":"cmd/tk_create_source/#tk-create-source","text":"Create source commands","title":"tk create source"},{"location":"cmd/tk_create_source/#synopsis","text":"Create source commands","title":"Synopsis"},{"location":"cmd/tk_create_source/#options","text":"-h, --help help for source","title":"Options"},{"location":"cmd/tk_create_source/#options-inherited-from-parent-commands","text":"--components strings list of components, accepts comma-separated values (default [source-controller,kustomize-controller]) --export export in yaml format to stdout --interval duration source sync interval (default 1m0s) --kubeconfig string path to the kubeconfig file (default \"~/.kube/config\") --namespace string the namespace scope for this operation (default \"gitops-system\") --timeout duration timeout for this operation (default 5m0s) --verbose print generated objects","title":"Options inherited from parent commands"},{"location":"cmd/tk_create_source/#see-also","text":"tk create - Create commands tk create source git - Create or update a git source","title":"SEE ALSO"},{"location":"cmd/tk_create_source_git/","text":"tk create source git \u00b6 Create or update a git source Synopsis \u00b6 The create source command generates a GitRepository resource and waits for it to sync. For Git over SSH, host and SSH keys are automatically generated and stored in a Kubernetes secret. For private Git repositories, the basic authentication credentials are stored in a Kubernetes secret. tk create source git [name] [flags] Examples \u00b6 # Create a source from a public Git repository master branch create source git podinfo \\ --url=https://github.com/stefanprodan/podinfo \\ --branch=master # Create a source from a Git repository pinned to specific git tag create source git podinfo \\ --url=https://github.com/stefanprodan/podinfo \\ --tag=\"3.2.3\" # Create a source from a public Git repository tag that matches a semver range create source git podinfo \\ --url=https://github.com/stefanprodan/podinfo \\ --tag-semver=\">=3.2.0 <3.3.0\" # Create a source from a Git repository using SSH authentication create source git podinfo \\ --url=ssh://git@github.com/stefanprodan/podinfo \\ --branch=master # Create a source from a Git repository using SSH authentication and an # ECDSA P-521 curve public key create source git podinfo \\ --url=ssh://git@github.com/stefanprodan/podinfo \\ --branch=master \\ --ssh-key-algorithm=ecdsa \\ --ssh-ecdsa-curve=p521 # Create a source from a Git repository using basic authentication create source git podinfo \\ --url=https://github.com/stefanprodan/podinfo \\ --username=username \\ --password=password Options \u00b6 --branch string git branch (default \"master\") -h, --help help for git -p, --password string basic authentication password --ssh-ecdsa-curve ecdsaCurve SSH ECDSA public key curve (p256, p384, p521) (default p384) --ssh-key-algorithm publicKeyAlgorithm SSH public key algorithm (rsa, ecdsa, ed25519) (default rsa) --ssh-rsa-bits rsaKeyBits SSH RSA public key bit size (multiplies of 8) (default 2048) --tag string git tag --tag-semver string git tag semver range --url string git address, e.g. ssh://git@host/org/repository -u, --username string basic authentication username Options inherited from parent commands \u00b6 --components strings list of components, accepts comma-separated values (default [source-controller,kustomize-controller]) --export export in yaml format to stdout --interval duration source sync interval (default 1m0s) --kubeconfig string path to the kubeconfig file (default \"~/.kube/config\") --namespace string the namespace scope for this operation (default \"gitops-system\") --timeout duration timeout for this operation (default 5m0s) --verbose print generated objects SEE ALSO \u00b6 tk create source - Create source commands","title":"Create source git"},{"location":"cmd/tk_create_source_git/#tk-create-source-git","text":"Create or update a git source","title":"tk create source git"},{"location":"cmd/tk_create_source_git/#synopsis","text":"The create source command generates a GitRepository resource and waits for it to sync. For Git over SSH, host and SSH keys are automatically generated and stored in a Kubernetes secret. For private Git repositories, the basic authentication credentials are stored in a Kubernetes secret. tk create source git [name] [flags]","title":"Synopsis"},{"location":"cmd/tk_create_source_git/#examples","text":"# Create a source from a public Git repository master branch create source git podinfo \\ --url=https://github.com/stefanprodan/podinfo \\ --branch=master # Create a source from a Git repository pinned to specific git tag create source git podinfo \\ --url=https://github.com/stefanprodan/podinfo \\ --tag=\"3.2.3\" # Create a source from a public Git repository tag that matches a semver range create source git podinfo \\ --url=https://github.com/stefanprodan/podinfo \\ --tag-semver=\">=3.2.0 <3.3.0\" # Create a source from a Git repository using SSH authentication create source git podinfo \\ --url=ssh://git@github.com/stefanprodan/podinfo \\ --branch=master # Create a source from a Git repository using SSH authentication and an # ECDSA P-521 curve public key create source git podinfo \\ --url=ssh://git@github.com/stefanprodan/podinfo \\ --branch=master \\ --ssh-key-algorithm=ecdsa \\ --ssh-ecdsa-curve=p521 # Create a source from a Git repository using basic authentication create source git podinfo \\ --url=https://github.com/stefanprodan/podinfo \\ --username=username \\ --password=password","title":"Examples"},{"location":"cmd/tk_create_source_git/#options","text":"--branch string git branch (default \"master\") -h, --help help for git -p, --password string basic authentication password --ssh-ecdsa-curve ecdsaCurve SSH ECDSA public key curve (p256, p384, p521) (default p384) --ssh-key-algorithm publicKeyAlgorithm SSH public key algorithm (rsa, ecdsa, ed25519) (default rsa) --ssh-rsa-bits rsaKeyBits SSH RSA public key bit size (multiplies of 8) (default 2048) --tag string git tag --tag-semver string git tag semver range --url string git address, e.g. ssh://git@host/org/repository -u, --username string basic authentication username","title":"Options"},{"location":"cmd/tk_create_source_git/#options-inherited-from-parent-commands","text":"--components strings list of components, accepts comma-separated values (default [source-controller,kustomize-controller]) --export export in yaml format to stdout --interval duration source sync interval (default 1m0s) --kubeconfig string path to the kubeconfig file (default \"~/.kube/config\") --namespace string the namespace scope for this operation (default \"gitops-system\") --timeout duration timeout for this operation (default 5m0s) --verbose print generated objects","title":"Options inherited from parent commands"},{"location":"cmd/tk_create_source_git/#see-also","text":"tk create source - Create source commands","title":"SEE ALSO"},{"location":"cmd/tk_delete/","text":"tk delete \u00b6 Delete commands Synopsis \u00b6 Delete commands Options \u00b6 -h, --help help for delete -s, --silent delete resource without asking for confirmation Options inherited from parent commands \u00b6 --components strings list of components, accepts comma-separated values (default [source-controller,kustomize-controller]) --kubeconfig string path to the kubeconfig file (default \"~/.kube/config\") --namespace string the namespace scope for this operation (default \"gitops-system\") --timeout duration timeout for this operation (default 5m0s) --verbose print generated objects SEE ALSO \u00b6 tk - Command line utility for assembling Kubernetes CD pipelines tk delete kustomization - Delete kustomization tk delete source - Delete sources commands","title":"Delete"},{"location":"cmd/tk_delete/#tk-delete","text":"Delete commands","title":"tk delete"},{"location":"cmd/tk_delete/#synopsis","text":"Delete commands","title":"Synopsis"},{"location":"cmd/tk_delete/#options","text":"-h, --help help for delete -s, --silent delete resource without asking for confirmation","title":"Options"},{"location":"cmd/tk_delete/#options-inherited-from-parent-commands","text":"--components strings list of components, accepts comma-separated values (default [source-controller,kustomize-controller]) --kubeconfig string path to the kubeconfig file (default \"~/.kube/config\") --namespace string the namespace scope for this operation (default \"gitops-system\") --timeout duration timeout for this operation (default 5m0s) --verbose print generated objects","title":"Options inherited from parent commands"},{"location":"cmd/tk_delete/#see-also","text":"tk - Command line utility for assembling Kubernetes CD pipelines tk delete kustomization - Delete kustomization tk delete source - Delete sources commands","title":"SEE ALSO"},{"location":"cmd/tk_delete_kustomization/","text":"tk delete kustomization \u00b6 Delete kustomization Synopsis \u00b6 Delete kustomization tk delete kustomization [name] [flags] Options \u00b6 -h, --help help for kustomization Options inherited from parent commands \u00b6 --components strings list of components, accepts comma-separated values (default [source-controller,kustomize-controller]) --kubeconfig string path to the kubeconfig file (default \"~/.kube/config\") --namespace string the namespace scope for this operation (default \"gitops-system\") -s, --silent delete resource without asking for confirmation --timeout duration timeout for this operation (default 5m0s) --verbose print generated objects SEE ALSO \u00b6 tk delete - Delete commands","title":"Delete kustomization"},{"location":"cmd/tk_delete_kustomization/#tk-delete-kustomization","text":"Delete kustomization","title":"tk delete kustomization"},{"location":"cmd/tk_delete_kustomization/#synopsis","text":"Delete kustomization tk delete kustomization [name] [flags]","title":"Synopsis"},{"location":"cmd/tk_delete_kustomization/#options","text":"-h, --help help for kustomization","title":"Options"},{"location":"cmd/tk_delete_kustomization/#options-inherited-from-parent-commands","text":"--components strings list of components, accepts comma-separated values (default [source-controller,kustomize-controller]) --kubeconfig string path to the kubeconfig file (default \"~/.kube/config\") --namespace string the namespace scope for this operation (default \"gitops-system\") -s, --silent delete resource without asking for confirmation --timeout duration timeout for this operation (default 5m0s) --verbose print generated objects","title":"Options inherited from parent commands"},{"location":"cmd/tk_delete_kustomization/#see-also","text":"tk delete - Delete commands","title":"SEE ALSO"},{"location":"cmd/tk_delete_source/","text":"tk delete source \u00b6 Delete sources commands Synopsis \u00b6 Delete sources commands Options \u00b6 -h, --help help for source Options inherited from parent commands \u00b6 --components strings list of components, accepts comma-separated values (default [source-controller,kustomize-controller]) --kubeconfig string path to the kubeconfig file (default \"~/.kube/config\") --namespace string the namespace scope for this operation (default \"gitops-system\") -s, --silent delete resource without asking for confirmation --timeout duration timeout for this operation (default 5m0s) --verbose print generated objects SEE ALSO \u00b6 tk delete - Delete commands tk delete source git - Delete git source","title":"Delete source"},{"location":"cmd/tk_delete_source/#tk-delete-source","text":"Delete sources commands","title":"tk delete source"},{"location":"cmd/tk_delete_source/#synopsis","text":"Delete sources commands","title":"Synopsis"},{"location":"cmd/tk_delete_source/#options","text":"-h, --help help for source","title":"Options"},{"location":"cmd/tk_delete_source/#options-inherited-from-parent-commands","text":"--components strings list of components, accepts comma-separated values (default [source-controller,kustomize-controller]) --kubeconfig string path to the kubeconfig file (default \"~/.kube/config\") --namespace string the namespace scope for this operation (default \"gitops-system\") -s, --silent delete resource without asking for confirmation --timeout duration timeout for this operation (default 5m0s) --verbose print generated objects","title":"Options inherited from parent commands"},{"location":"cmd/tk_delete_source/#see-also","text":"tk delete - Delete commands tk delete source git - Delete git source","title":"SEE ALSO"},{"location":"cmd/tk_delete_source_git/","text":"tk delete source git \u00b6 Delete git source Synopsis \u00b6 Delete git source tk delete source git [name] [flags] Options \u00b6 -h, --help help for git Options inherited from parent commands \u00b6 --components strings list of components, accepts comma-separated values (default [source-controller,kustomize-controller]) --kubeconfig string path to the kubeconfig file (default \"~/.kube/config\") --namespace string the namespace scope for this operation (default \"gitops-system\") -s, --silent delete resource without asking for confirmation --timeout duration timeout for this operation (default 5m0s) --verbose print generated objects SEE ALSO \u00b6 tk delete source - Delete sources commands","title":"Delete source git"},{"location":"cmd/tk_delete_source_git/#tk-delete-source-git","text":"Delete git source","title":"tk delete source git"},{"location":"cmd/tk_delete_source_git/#synopsis","text":"Delete git source tk delete source git [name] [flags]","title":"Synopsis"},{"location":"cmd/tk_delete_source_git/#options","text":"-h, --help help for git","title":"Options"},{"location":"cmd/tk_delete_source_git/#options-inherited-from-parent-commands","text":"--components strings list of components, accepts comma-separated values (default [source-controller,kustomize-controller]) --kubeconfig string path to the kubeconfig file (default \"~/.kube/config\") --namespace string the namespace scope for this operation (default \"gitops-system\") -s, --silent delete resource without asking for confirmation --timeout duration timeout for this operation (default 5m0s) --verbose print generated objects","title":"Options inherited from parent commands"},{"location":"cmd/tk_delete_source_git/#see-also","text":"tk delete source - Delete sources commands","title":"SEE ALSO"},{"location":"cmd/tk_export/","text":"tk export \u00b6 Export commands Synopsis \u00b6 Export commands Options \u00b6 --all select all resources -h, --help help for export Options inherited from parent commands \u00b6 --components strings list of components, accepts comma-separated values (default [source-controller,kustomize-controller]) --kubeconfig string path to the kubeconfig file (default \"~/.kube/config\") --namespace string the namespace scope for this operation (default \"gitops-system\") --timeout duration timeout for this operation (default 5m0s) --verbose print generated objects SEE ALSO \u00b6 tk - Command line utility for assembling Kubernetes CD pipelines tk export kustomization - Export kustomization in YAML format tk export source - Export source commands","title":"Export"},{"location":"cmd/tk_export/#tk-export","text":"Export commands","title":"tk export"},{"location":"cmd/tk_export/#synopsis","text":"Export commands","title":"Synopsis"},{"location":"cmd/tk_export/#options","text":"--all select all resources -h, --help help for export","title":"Options"},{"location":"cmd/tk_export/#options-inherited-from-parent-commands","text":"--components strings list of components, accepts comma-separated values (default [source-controller,kustomize-controller]) --kubeconfig string path to the kubeconfig file (default \"~/.kube/config\") --namespace string the namespace scope for this operation (default \"gitops-system\") --timeout duration timeout for this operation (default 5m0s) --verbose print generated objects","title":"Options inherited from parent commands"},{"location":"cmd/tk_export/#see-also","text":"tk - Command line utility for assembling Kubernetes CD pipelines tk export kustomization - Export kustomization in YAML format tk export source - Export source commands","title":"SEE ALSO"},{"location":"cmd/tk_export_kustomization/","text":"tk export kustomization \u00b6 Export kustomization in YAML format Synopsis \u00b6 Export kustomization in YAML format tk export kustomization [name] [flags] Examples \u00b6 # Export all kustomizations export kustomization --all > kustomizations.yaml # Export a kustomization export kustomization my-app > kustomization.yaml Options \u00b6 -h, --help help for kustomization Options inherited from parent commands \u00b6 --all select all resources --components strings list of components, accepts comma-separated values (default [source-controller,kustomize-controller]) --kubeconfig string path to the kubeconfig file (default \"~/.kube/config\") --namespace string the namespace scope for this operation (default \"gitops-system\") --timeout duration timeout for this operation (default 5m0s) --verbose print generated objects SEE ALSO \u00b6 tk export - Export commands","title":"Export kustomization"},{"location":"cmd/tk_export_kustomization/#tk-export-kustomization","text":"Export kustomization in YAML format","title":"tk export kustomization"},{"location":"cmd/tk_export_kustomization/#synopsis","text":"Export kustomization in YAML format tk export kustomization [name] [flags]","title":"Synopsis"},{"location":"cmd/tk_export_kustomization/#examples","text":"# Export all kustomizations export kustomization --all > kustomizations.yaml # Export a kustomization export kustomization my-app > kustomization.yaml","title":"Examples"},{"location":"cmd/tk_export_kustomization/#options","text":"-h, --help help for kustomization","title":"Options"},{"location":"cmd/tk_export_kustomization/#options-inherited-from-parent-commands","text":"--all select all resources --components strings list of components, accepts comma-separated values (default [source-controller,kustomize-controller]) --kubeconfig string path to the kubeconfig file (default \"~/.kube/config\") --namespace string the namespace scope for this operation (default \"gitops-system\") --timeout duration timeout for this operation (default 5m0s) --verbose print generated objects","title":"Options inherited from parent commands"},{"location":"cmd/tk_export_kustomization/#see-also","text":"tk export - Export commands","title":"SEE ALSO"},{"location":"cmd/tk_export_source/","text":"tk export source \u00b6 Export source commands Synopsis \u00b6 Export source commands Options \u00b6 -h, --help help for source --with-credentials include credential secrets Options inherited from parent commands \u00b6 --all select all resources --components strings list of components, accepts comma-separated values (default [source-controller,kustomize-controller]) --kubeconfig string path to the kubeconfig file (default \"~/.kube/config\") --namespace string the namespace scope for this operation (default \"gitops-system\") --timeout duration timeout for this operation (default 5m0s) --verbose print generated objects SEE ALSO \u00b6 tk export - Export commands tk export source git - Export git sources in YAML format","title":"Export source"},{"location":"cmd/tk_export_source/#tk-export-source","text":"Export source commands","title":"tk export source"},{"location":"cmd/tk_export_source/#synopsis","text":"Export source commands","title":"Synopsis"},{"location":"cmd/tk_export_source/#options","text":"-h, --help help for source --with-credentials include credential secrets","title":"Options"},{"location":"cmd/tk_export_source/#options-inherited-from-parent-commands","text":"--all select all resources --components strings list of components, accepts comma-separated values (default [source-controller,kustomize-controller]) --kubeconfig string path to the kubeconfig file (default \"~/.kube/config\") --namespace string the namespace scope for this operation (default \"gitops-system\") --timeout duration timeout for this operation (default 5m0s) --verbose print generated objects","title":"Options inherited from parent commands"},{"location":"cmd/tk_export_source/#see-also","text":"tk export - Export commands tk export source git - Export git sources in YAML format","title":"SEE ALSO"},{"location":"cmd/tk_export_source_git/","text":"tk export source git \u00b6 Export git sources in YAML format Synopsis \u00b6 Export git sources in YAML format tk export source git [name] [flags] Examples \u00b6 # Export all git sources export source git --all > sources.yaml # Export a git source including the SSH keys or basic auth credentials export source git my-private-repo --with-credentials > source.yaml Options \u00b6 -h, --help help for git Options inherited from parent commands \u00b6 --all select all resources --components strings list of components, accepts comma-separated values (default [source-controller,kustomize-controller]) --kubeconfig string path to the kubeconfig file (default \"~/.kube/config\") --namespace string the namespace scope for this operation (default \"gitops-system\") --timeout duration timeout for this operation (default 5m0s) --verbose print generated objects --with-credentials include credential secrets SEE ALSO \u00b6 tk export source - Export source commands","title":"Export source git"},{"location":"cmd/tk_export_source_git/#tk-export-source-git","text":"Export git sources in YAML format","title":"tk export source git"},{"location":"cmd/tk_export_source_git/#synopsis","text":"Export git sources in YAML format tk export source git [name] [flags]","title":"Synopsis"},{"location":"cmd/tk_export_source_git/#examples","text":"# Export all git sources export source git --all > sources.yaml # Export a git source including the SSH keys or basic auth credentials export source git my-private-repo --with-credentials > source.yaml","title":"Examples"},{"location":"cmd/tk_export_source_git/#options","text":"-h, --help help for git","title":"Options"},{"location":"cmd/tk_export_source_git/#options-inherited-from-parent-commands","text":"--all select all resources --components strings list of components, accepts comma-separated values (default [source-controller,kustomize-controller]) --kubeconfig string path to the kubeconfig file (default \"~/.kube/config\") --namespace string the namespace scope for this operation (default \"gitops-system\") --timeout duration timeout for this operation (default 5m0s) --verbose print generated objects --with-credentials include credential secrets","title":"Options inherited from parent commands"},{"location":"cmd/tk_export_source_git/#see-also","text":"tk export source - Export source commands","title":"SEE ALSO"},{"location":"cmd/tk_get/","text":"tk get \u00b6 Get commands Synopsis \u00b6 Get commands Options \u00b6 -h, --help help for get Options inherited from parent commands \u00b6 --components strings list of components, accepts comma-separated values (default [source-controller,kustomize-controller]) --kubeconfig string path to the kubeconfig file (default \"~/.kube/config\") --namespace string the namespace scope for this operation (default \"gitops-system\") --timeout duration timeout for this operation (default 5m0s) --verbose print generated objects SEE ALSO \u00b6 tk - Command line utility for assembling Kubernetes CD pipelines tk get kustomizations - Get kustomizations status tk get sources - Get sources commands","title":"Get"},{"location":"cmd/tk_get/#tk-get","text":"Get commands","title":"tk get"},{"location":"cmd/tk_get/#synopsis","text":"Get commands","title":"Synopsis"},{"location":"cmd/tk_get/#options","text":"-h, --help help for get","title":"Options"},{"location":"cmd/tk_get/#options-inherited-from-parent-commands","text":"--components strings list of components, accepts comma-separated values (default [source-controller,kustomize-controller]) --kubeconfig string path to the kubeconfig file (default \"~/.kube/config\") --namespace string the namespace scope for this operation (default \"gitops-system\") --timeout duration timeout for this operation (default 5m0s) --verbose print generated objects","title":"Options inherited from parent commands"},{"location":"cmd/tk_get/#see-also","text":"tk - Command line utility for assembling Kubernetes CD pipelines tk get kustomizations - Get kustomizations status tk get sources - Get sources commands","title":"SEE ALSO"},{"location":"cmd/tk_get_kustomizations/","text":"tk get kustomizations \u00b6 Get kustomizations status Synopsis \u00b6 The get kustomizations command prints the status of the resources. tk get kustomizations [flags] Options \u00b6 -h, --help help for kustomizations Options inherited from parent commands \u00b6 --components strings list of components, accepts comma-separated values (default [source-controller,kustomize-controller]) --kubeconfig string path to the kubeconfig file (default \"~/.kube/config\") --namespace string the namespace scope for this operation (default \"gitops-system\") --timeout duration timeout for this operation (default 5m0s) --verbose print generated objects SEE ALSO \u00b6 tk get - Get commands","title":"Get kustomizations"},{"location":"cmd/tk_get_kustomizations/#tk-get-kustomizations","text":"Get kustomizations status","title":"tk get kustomizations"},{"location":"cmd/tk_get_kustomizations/#synopsis","text":"The get kustomizations command prints the status of the resources. tk get kustomizations [flags]","title":"Synopsis"},{"location":"cmd/tk_get_kustomizations/#options","text":"-h, --help help for kustomizations","title":"Options"},{"location":"cmd/tk_get_kustomizations/#options-inherited-from-parent-commands","text":"--components strings list of components, accepts comma-separated values (default [source-controller,kustomize-controller]) --kubeconfig string path to the kubeconfig file (default \"~/.kube/config\") --namespace string the namespace scope for this operation (default \"gitops-system\") --timeout duration timeout for this operation (default 5m0s) --verbose print generated objects","title":"Options inherited from parent commands"},{"location":"cmd/tk_get_kustomizations/#see-also","text":"tk get - Get commands","title":"SEE ALSO"},{"location":"cmd/tk_get_sources/","text":"tk get sources \u00b6 Get sources commands Synopsis \u00b6 Get sources commands Options \u00b6 -h, --help help for sources Options inherited from parent commands \u00b6 --components strings list of components, accepts comma-separated values (default [source-controller,kustomize-controller]) --kubeconfig string path to the kubeconfig file (default \"~/.kube/config\") --namespace string the namespace scope for this operation (default \"gitops-system\") --timeout duration timeout for this operation (default 5m0s) --verbose print generated objects SEE ALSO \u00b6 tk get - Get commands tk get sources git - Get git sources status","title":"Get sources"},{"location":"cmd/tk_get_sources/#tk-get-sources","text":"Get sources commands","title":"tk get sources"},{"location":"cmd/tk_get_sources/#synopsis","text":"Get sources commands","title":"Synopsis"},{"location":"cmd/tk_get_sources/#options","text":"-h, --help help for sources","title":"Options"},{"location":"cmd/tk_get_sources/#options-inherited-from-parent-commands","text":"--components strings list of components, accepts comma-separated values (default [source-controller,kustomize-controller]) --kubeconfig string path to the kubeconfig file (default \"~/.kube/config\") --namespace string the namespace scope for this operation (default \"gitops-system\") --timeout duration timeout for this operation (default 5m0s) --verbose print generated objects","title":"Options inherited from parent commands"},{"location":"cmd/tk_get_sources/#see-also","text":"tk get - Get commands tk get sources git - Get git sources status","title":"SEE ALSO"},{"location":"cmd/tk_get_sources_git/","text":"tk get sources git \u00b6 Get git sources status Synopsis \u00b6 The get sources command prints the status of the git resources. tk get sources git [flags] Options \u00b6 -h, --help help for git Options inherited from parent commands \u00b6 --components strings list of components, accepts comma-separated values (default [source-controller,kustomize-controller]) --kubeconfig string path to the kubeconfig file (default \"~/.kube/config\") --namespace string the namespace scope for this operation (default \"gitops-system\") --timeout duration timeout for this operation (default 5m0s) --verbose print generated objects SEE ALSO \u00b6 tk get sources - Get sources commands","title":"Get sources git"},{"location":"cmd/tk_get_sources_git/#tk-get-sources-git","text":"Get git sources status","title":"tk get sources git"},{"location":"cmd/tk_get_sources_git/#synopsis","text":"The get sources command prints the status of the git resources. tk get sources git [flags]","title":"Synopsis"},{"location":"cmd/tk_get_sources_git/#options","text":"-h, --help help for git","title":"Options"},{"location":"cmd/tk_get_sources_git/#options-inherited-from-parent-commands","text":"--components strings list of components, accepts comma-separated values (default [source-controller,kustomize-controller]) --kubeconfig string path to the kubeconfig file (default \"~/.kube/config\") --namespace string the namespace scope for this operation (default \"gitops-system\") --timeout duration timeout for this operation (default 5m0s) --verbose print generated objects","title":"Options inherited from parent commands"},{"location":"cmd/tk_get_sources_git/#see-also","text":"tk get sources - Get sources commands","title":"SEE ALSO"},{"location":"cmd/tk_install/","text":"tk install \u00b6 Install the toolkit components Synopsis \u00b6 The install command deploys the toolkit components in the specified namespace. If a previous version is installed, then an in-place upgrade will be performed. tk install [flags] Examples \u00b6 # Install the latest version in the gitops-systems namespace install --version=master --namespace=gitops-systems # Dry-run install for a specific version and a series of components install --dry-run --version=0.0.1 --components=\"source-controller,kustomize-controller\" # Dry-run install with manifests preview install --dry-run --verbose Options \u00b6 --dry-run only print the object that would be applied -h, --help help for install --manifests string path to the manifest directory, dev only -v, --version string toolkit tag or branch (default \"master\") Options inherited from parent commands \u00b6 --components strings list of components, accepts comma-separated values (default [source-controller,kustomize-controller]) --kubeconfig string path to the kubeconfig file (default \"~/.kube/config\") --namespace string the namespace scope for this operation (default \"gitops-system\") --timeout duration timeout for this operation (default 5m0s) --verbose print generated objects SEE ALSO \u00b6 tk - Command line utility for assembling Kubernetes CD pipelines","title":"Install"},{"location":"cmd/tk_install/#tk-install","text":"Install the toolkit components","title":"tk install"},{"location":"cmd/tk_install/#synopsis","text":"The install command deploys the toolkit components in the specified namespace. If a previous version is installed, then an in-place upgrade will be performed. tk install [flags]","title":"Synopsis"},{"location":"cmd/tk_install/#examples","text":"# Install the latest version in the gitops-systems namespace install --version=master --namespace=gitops-systems # Dry-run install for a specific version and a series of components install --dry-run --version=0.0.1 --components=\"source-controller,kustomize-controller\" # Dry-run install with manifests preview install --dry-run --verbose","title":"Examples"},{"location":"cmd/tk_install/#options","text":"--dry-run only print the object that would be applied -h, --help help for install --manifests string path to the manifest directory, dev only -v, --version string toolkit tag or branch (default \"master\")","title":"Options"},{"location":"cmd/tk_install/#options-inherited-from-parent-commands","text":"--components strings list of components, accepts comma-separated values (default [source-controller,kustomize-controller]) --kubeconfig string path to the kubeconfig file (default \"~/.kube/config\") --namespace string the namespace scope for this operation (default \"gitops-system\") --timeout duration timeout for this operation (default 5m0s) --verbose print generated objects","title":"Options inherited from parent commands"},{"location":"cmd/tk_install/#see-also","text":"tk - Command line utility for assembling Kubernetes CD pipelines","title":"SEE ALSO"},{"location":"cmd/tk_resume/","text":"tk resume \u00b6 Resume commands Synopsis \u00b6 Resume commands Options \u00b6 -h, --help help for resume Options inherited from parent commands \u00b6 --components strings list of components, accepts comma-separated values (default [source-controller,kustomize-controller]) --kubeconfig string path to the kubeconfig file (default \"~/.kube/config\") --namespace string the namespace scope for this operation (default \"gitops-system\") --timeout duration timeout for this operation (default 5m0s) --verbose print generated objects SEE ALSO \u00b6 tk - Command line utility for assembling Kubernetes CD pipelines tk resume kustomization - Resume kustomization","title":"Resume"},{"location":"cmd/tk_resume/#tk-resume","text":"Resume commands","title":"tk resume"},{"location":"cmd/tk_resume/#synopsis","text":"Resume commands","title":"Synopsis"},{"location":"cmd/tk_resume/#options","text":"-h, --help help for resume","title":"Options"},{"location":"cmd/tk_resume/#options-inherited-from-parent-commands","text":"--components strings list of components, accepts comma-separated values (default [source-controller,kustomize-controller]) --kubeconfig string path to the kubeconfig file (default \"~/.kube/config\") --namespace string the namespace scope for this operation (default \"gitops-system\") --timeout duration timeout for this operation (default 5m0s) --verbose print generated objects","title":"Options inherited from parent commands"},{"location":"cmd/tk_resume/#see-also","text":"tk - Command line utility for assembling Kubernetes CD pipelines tk resume kustomization - Resume kustomization","title":"SEE ALSO"},{"location":"cmd/tk_resume_kustomization/","text":"tk resume kustomization \u00b6 Resume kustomization Synopsis \u00b6 The resume command marks a previously suspended Kustomization resource for reconciliation and waits for it to finish the apply. tk resume kustomization [name] [flags] Options \u00b6 -h, --help help for kustomization Options inherited from parent commands \u00b6 --components strings list of components, accepts comma-separated values (default [source-controller,kustomize-controller]) --kubeconfig string path to the kubeconfig file (default \"~/.kube/config\") --namespace string the namespace scope for this operation (default \"gitops-system\") --timeout duration timeout for this operation (default 5m0s) --verbose print generated objects SEE ALSO \u00b6 tk resume - Resume commands","title":"Resume kustomization"},{"location":"cmd/tk_resume_kustomization/#tk-resume-kustomization","text":"Resume kustomization","title":"tk resume kustomization"},{"location":"cmd/tk_resume_kustomization/#synopsis","text":"The resume command marks a previously suspended Kustomization resource for reconciliation and waits for it to finish the apply. tk resume kustomization [name] [flags]","title":"Synopsis"},{"location":"cmd/tk_resume_kustomization/#options","text":"-h, --help help for kustomization","title":"Options"},{"location":"cmd/tk_resume_kustomization/#options-inherited-from-parent-commands","text":"--components strings list of components, accepts comma-separated values (default [source-controller,kustomize-controller]) --kubeconfig string path to the kubeconfig file (default \"~/.kube/config\") --namespace string the namespace scope for this operation (default \"gitops-system\") --timeout duration timeout for this operation (default 5m0s) --verbose print generated objects","title":"Options inherited from parent commands"},{"location":"cmd/tk_resume_kustomization/#see-also","text":"tk resume - Resume commands","title":"SEE ALSO"},{"location":"cmd/tk_suspend/","text":"tk suspend \u00b6 Suspend commands Synopsis \u00b6 Suspend commands Options \u00b6 -h, --help help for suspend Options inherited from parent commands \u00b6 --components strings list of components, accepts comma-separated values (default [source-controller,kustomize-controller]) --kubeconfig string path to the kubeconfig file (default \"~/.kube/config\") --namespace string the namespace scope for this operation (default \"gitops-system\") --timeout duration timeout for this operation (default 5m0s) --verbose print generated objects SEE ALSO \u00b6 tk - Command line utility for assembling Kubernetes CD pipelines tk suspend kustomization - Suspend kustomization","title":"Suspend"},{"location":"cmd/tk_suspend/#tk-suspend","text":"Suspend commands","title":"tk suspend"},{"location":"cmd/tk_suspend/#synopsis","text":"Suspend commands","title":"Synopsis"},{"location":"cmd/tk_suspend/#options","text":"-h, --help help for suspend","title":"Options"},{"location":"cmd/tk_suspend/#options-inherited-from-parent-commands","text":"--components strings list of components, accepts comma-separated values (default [source-controller,kustomize-controller]) --kubeconfig string path to the kubeconfig file (default \"~/.kube/config\") --namespace string the namespace scope for this operation (default \"gitops-system\") --timeout duration timeout for this operation (default 5m0s) --verbose print generated objects","title":"Options inherited from parent commands"},{"location":"cmd/tk_suspend/#see-also","text":"tk - Command line utility for assembling Kubernetes CD pipelines tk suspend kustomization - Suspend kustomization","title":"SEE ALSO"},{"location":"cmd/tk_suspend_kustomization/","text":"tk suspend kustomization \u00b6 Suspend kustomization Synopsis \u00b6 The suspend command disables the reconciliation of a Kustomization resource. tk suspend kustomization [name] [flags] Options \u00b6 -h, --help help for kustomization Options inherited from parent commands \u00b6 --components strings list of components, accepts comma-separated values (default [source-controller,kustomize-controller]) --kubeconfig string path to the kubeconfig file (default \"~/.kube/config\") --namespace string the namespace scope for this operation (default \"gitops-system\") --timeout duration timeout for this operation (default 5m0s) --verbose print generated objects SEE ALSO \u00b6 tk suspend - Suspend commands","title":"Suspend kustomization"},{"location":"cmd/tk_suspend_kustomization/#tk-suspend-kustomization","text":"Suspend kustomization","title":"tk suspend kustomization"},{"location":"cmd/tk_suspend_kustomization/#synopsis","text":"The suspend command disables the reconciliation of a Kustomization resource. tk suspend kustomization [name] [flags]","title":"Synopsis"},{"location":"cmd/tk_suspend_kustomization/#options","text":"-h, --help help for kustomization","title":"Options"},{"location":"cmd/tk_suspend_kustomization/#options-inherited-from-parent-commands","text":"--components strings list of components, accepts comma-separated values (default [source-controller,kustomize-controller]) --kubeconfig string path to the kubeconfig file (default \"~/.kube/config\") --namespace string the namespace scope for this operation (default \"gitops-system\") --timeout duration timeout for this operation (default 5m0s) --verbose print generated objects","title":"Options inherited from parent commands"},{"location":"cmd/tk_suspend_kustomization/#see-also","text":"tk suspend - Suspend commands","title":"SEE ALSO"},{"location":"cmd/tk_sync/","text":"tk sync \u00b6 Synchronize commands Synopsis \u00b6 Synchronize commands Options \u00b6 -h, --help help for sync Options inherited from parent commands \u00b6 --components strings list of components, accepts comma-separated values (default [source-controller,kustomize-controller]) --kubeconfig string path to the kubeconfig file (default \"~/.kube/config\") --namespace string the namespace scope for this operation (default \"gitops-system\") --timeout duration timeout for this operation (default 5m0s) --verbose print generated objects SEE ALSO \u00b6 tk - Command line utility for assembling Kubernetes CD pipelines tk sync kustomization - Synchronize kustomization tk sync source - Synchronize source commands","title":"Sync"},{"location":"cmd/tk_sync/#tk-sync","text":"Synchronize commands","title":"tk sync"},{"location":"cmd/tk_sync/#synopsis","text":"Synchronize commands","title":"Synopsis"},{"location":"cmd/tk_sync/#options","text":"-h, --help help for sync","title":"Options"},{"location":"cmd/tk_sync/#options-inherited-from-parent-commands","text":"--components strings list of components, accepts comma-separated values (default [source-controller,kustomize-controller]) --kubeconfig string path to the kubeconfig file (default \"~/.kube/config\") --namespace string the namespace scope for this operation (default \"gitops-system\") --timeout duration timeout for this operation (default 5m0s) --verbose print generated objects","title":"Options inherited from parent commands"},{"location":"cmd/tk_sync/#see-also","text":"tk - Command line utility for assembling Kubernetes CD pipelines tk sync kustomization - Synchronize kustomization tk sync source - Synchronize source commands","title":"SEE ALSO"},{"location":"cmd/tk_sync_kustomization/","text":"tk sync kustomization \u00b6 Synchronize kustomization Synopsis \u00b6 The sync kustomization command triggers a reconciliation of a Kustomization resource and waits for it to finish. tk sync kustomization [name] [flags] Examples \u00b6 # Trigger a kustomization apply outside of the reconciliation interval sync kustomization podinfo # Trigger a git sync of the kustomization source and apply changes sync kustomization podinfo --with-source Options \u00b6 -h, --help help for kustomization --with-source synchronize kustomization source Options inherited from parent commands \u00b6 --components strings list of components, accepts comma-separated values (default [source-controller,kustomize-controller]) --kubeconfig string path to the kubeconfig file (default \"~/.kube/config\") --namespace string the namespace scope for this operation (default \"gitops-system\") --timeout duration timeout for this operation (default 5m0s) --verbose print generated objects SEE ALSO \u00b6 tk sync - Synchronize commands","title":"Sync kustomization"},{"location":"cmd/tk_sync_kustomization/#tk-sync-kustomization","text":"Synchronize kustomization","title":"tk sync kustomization"},{"location":"cmd/tk_sync_kustomization/#synopsis","text":"The sync kustomization command triggers a reconciliation of a Kustomization resource and waits for it to finish. tk sync kustomization [name] [flags]","title":"Synopsis"},{"location":"cmd/tk_sync_kustomization/#examples","text":"# Trigger a kustomization apply outside of the reconciliation interval sync kustomization podinfo # Trigger a git sync of the kustomization source and apply changes sync kustomization podinfo --with-source","title":"Examples"},{"location":"cmd/tk_sync_kustomization/#options","text":"-h, --help help for kustomization --with-source synchronize kustomization source","title":"Options"},{"location":"cmd/tk_sync_kustomization/#options-inherited-from-parent-commands","text":"--components strings list of components, accepts comma-separated values (default [source-controller,kustomize-controller]) --kubeconfig string path to the kubeconfig file (default \"~/.kube/config\") --namespace string the namespace scope for this operation (default \"gitops-system\") --timeout duration timeout for this operation (default 5m0s) --verbose print generated objects","title":"Options inherited from parent commands"},{"location":"cmd/tk_sync_kustomization/#see-also","text":"tk sync - Synchronize commands","title":"SEE ALSO"},{"location":"cmd/tk_sync_source/","text":"tk sync source \u00b6 Synchronize source commands Synopsis \u00b6 Synchronize source commands Options \u00b6 -h, --help help for source Options inherited from parent commands \u00b6 --components strings list of components, accepts comma-separated values (default [source-controller,kustomize-controller]) --kubeconfig string path to the kubeconfig file (default \"~/.kube/config\") --namespace string the namespace scope for this operation (default \"gitops-system\") --timeout duration timeout for this operation (default 5m0s) --verbose print generated objects SEE ALSO \u00b6 tk sync - Synchronize commands tk sync source git - Synchronize git source","title":"Sync source"},{"location":"cmd/tk_sync_source/#tk-sync-source","text":"Synchronize source commands","title":"tk sync source"},{"location":"cmd/tk_sync_source/#synopsis","text":"Synchronize source commands","title":"Synopsis"},{"location":"cmd/tk_sync_source/#options","text":"-h, --help help for source","title":"Options"},{"location":"cmd/tk_sync_source/#options-inherited-from-parent-commands","text":"--components strings list of components, accepts comma-separated values (default [source-controller,kustomize-controller]) --kubeconfig string path to the kubeconfig file (default \"~/.kube/config\") --namespace string the namespace scope for this operation (default \"gitops-system\") --timeout duration timeout for this operation (default 5m0s) --verbose print generated objects","title":"Options inherited from parent commands"},{"location":"cmd/tk_sync_source/#see-also","text":"tk sync - Synchronize commands tk sync source git - Synchronize git source","title":"SEE ALSO"},{"location":"cmd/tk_sync_source_git/","text":"tk sync source git \u00b6 Synchronize git source Synopsis \u00b6 The sync source command triggers a reconciliation of a GitRepository resource and waits for it to finish. tk sync source git [name] [flags] Examples \u00b6 # Trigger a git pull for an existing source sync source git podinfo Options \u00b6 -h, --help help for git Options inherited from parent commands \u00b6 --components strings list of components, accepts comma-separated values (default [source-controller,kustomize-controller]) --kubeconfig string path to the kubeconfig file (default \"~/.kube/config\") --namespace string the namespace scope for this operation (default \"gitops-system\") --timeout duration timeout for this operation (default 5m0s) --verbose print generated objects SEE ALSO \u00b6 tk sync source - Synchronize source commands","title":"Sync source git"},{"location":"cmd/tk_sync_source_git/#tk-sync-source-git","text":"Synchronize git source","title":"tk sync source git"},{"location":"cmd/tk_sync_source_git/#synopsis","text":"The sync source command triggers a reconciliation of a GitRepository resource and waits for it to finish. tk sync source git [name] [flags]","title":"Synopsis"},{"location":"cmd/tk_sync_source_git/#examples","text":"# Trigger a git pull for an existing source sync source git podinfo","title":"Examples"},{"location":"cmd/tk_sync_source_git/#options","text":"-h, --help help for git","title":"Options"},{"location":"cmd/tk_sync_source_git/#options-inherited-from-parent-commands","text":"--components strings list of components, accepts comma-separated values (default [source-controller,kustomize-controller]) --kubeconfig string path to the kubeconfig file (default \"~/.kube/config\") --namespace string the namespace scope for this operation (default \"gitops-system\") --timeout duration timeout for this operation (default 5m0s) --verbose print generated objects","title":"Options inherited from parent commands"},{"location":"cmd/tk_sync_source_git/#see-also","text":"tk sync source - Synchronize source commands","title":"SEE ALSO"},{"location":"cmd/tk_uninstall/","text":"tk uninstall \u00b6 Uninstall the toolkit components Synopsis \u00b6 The uninstall command removes the namespace, cluster roles, cluster role bindings and CRDs. tk uninstall [flags] Examples \u00b6 # Dry-run uninstall of all components uninstall --dry-run --namespace=gitops-system # Uninstall all components and delete custom resource definitions uninstall --crds --namespace=gitops-system Options \u00b6 --crds removes all CRDs previously installed --dry-run only print the object that would be deleted -h, --help help for uninstall --kustomizations removes all kustomizations previously installed -s, --silent delete components without asking for confirmation Options inherited from parent commands \u00b6 --components strings list of components, accepts comma-separated values (default [source-controller,kustomize-controller]) --kubeconfig string path to the kubeconfig file (default \"~/.kube/config\") --namespace string the namespace scope for this operation (default \"gitops-system\") --timeout duration timeout for this operation (default 5m0s) --verbose print generated objects SEE ALSO \u00b6 tk - Command line utility for assembling Kubernetes CD pipelines","title":"Uninstall"},{"location":"cmd/tk_uninstall/#tk-uninstall","text":"Uninstall the toolkit components","title":"tk uninstall"},{"location":"cmd/tk_uninstall/#synopsis","text":"The uninstall command removes the namespace, cluster roles, cluster role bindings and CRDs. tk uninstall [flags]","title":"Synopsis"},{"location":"cmd/tk_uninstall/#examples","text":"# Dry-run uninstall of all components uninstall --dry-run --namespace=gitops-system # Uninstall all components and delete custom resource definitions uninstall --crds --namespace=gitops-system","title":"Examples"},{"location":"cmd/tk_uninstall/#options","text":"--crds removes all CRDs previously installed --dry-run only print the object that would be deleted -h, --help help for uninstall --kustomizations removes all kustomizations previously installed -s, --silent delete components without asking for confirmation","title":"Options"},{"location":"cmd/tk_uninstall/#options-inherited-from-parent-commands","text":"--components strings list of components, accepts comma-separated values (default [source-controller,kustomize-controller]) --kubeconfig string path to the kubeconfig file (default \"~/.kube/config\") --namespace string the namespace scope for this operation (default \"gitops-system\") --timeout duration timeout for this operation (default 5m0s) --verbose print generated objects","title":"Options inherited from parent commands"},{"location":"cmd/tk_uninstall/#see-also","text":"tk - Command line utility for assembling Kubernetes CD pipelines","title":"SEE ALSO"},{"location":"components/kustomize/api/","text":"Kustomize API reference Packages: kustomize.fluxcd.io/v1alpha1 kustomize.fluxcd.io/v1alpha1 Package v1alpha1 contains API Schema definitions for the kustomize v1alpha1 API group Resource Types: Kustomization Profile Kustomization Kustomization is the Schema for the kustomizations API. Field Description apiVersion string kustomize.fluxcd.io/v1alpha1 kind string Kustomization metadata Kubernetes meta/v1.ObjectMeta Refer to the Kubernetes API documentation for the fields of the metadata field. spec KustomizationSpec dependsOn []string (Optional) A list of kustomizations that must be ready before this kustomization can be applied. interval Kubernetes meta/v1.Duration The interval at which to apply the kustomization. path string Path to the directory containing the kustomization file. prune bool Enables garbage collection. healthChecks []WorkloadReference (Optional) A list of workloads (Deployments, DaemonSets and StatefulSets) to be included in the health assessment. serviceAccount ServiceAccount (Optional) The Kubernetes service account used for applying the kustomization. sourceRef Kubernetes core/v1.TypedLocalObjectReference Reference of the source where the kustomization file is. suspend bool (Optional) This flag tells the controller to suspend subsequent kustomize executions, it does not apply to already started executions. Defaults to false. timeout Kubernetes meta/v1.Duration (Optional) Timeout for validation, apply and health checking operations. Defaults to \u2018Interval\u2019 duration. validation string (Optional) Validate the Kubernetes objects before applying them on the cluster. The validation strategy can be \u2018client\u2019 (local dry-run) or \u2018server\u2019 (APIServer dry-run). status KustomizationStatus Profile Profile is the Schema for the profiles API Field Description apiVersion string kustomize.fluxcd.io/v1alpha1 kind string Profile metadata Kubernetes meta/v1.ObjectMeta Refer to the Kubernetes API documentation for the fields of the metadata field. spec ProfileSpec alert AlertProvider (Optional) Alerting configuration of the kustomizations targeted by this profile. kustomizations []string The list of kustomizations that this profile applies to. status ProfileStatus AlertProvider ( Appears on: ProfileSpec ) Alert is the configuration of alerting for a specific provider Field Description address string HTTP(S) webhook address of this provider channel string Alert channel for this provider username string Bot username for this provider verbosity string (Optional) Filter alerts based on verbosity level, defaults to (\u2018error\u2019). type string Type of provider Condition ( Appears on: KustomizationStatus , ProfileStatus ) Condition contains condition information for a kustomization. Field Description type string Type of the condition, currently (\u2018Ready\u2019). status Kubernetes core/v1.ConditionStatus Status of the condition, one of (\u2018True\u2019, \u2018False\u2019, \u2018Unknown\u2019). lastTransitionTime Kubernetes meta/v1.Time LastTransitionTime is the timestamp corresponding to the last status change of this condition. reason string Reason is a brief machine readable explanation for the condition\u2019s last transition. message string (Optional) Message is a human readable description of the details of the last transition, complementing reason. KustomizationSpec ( Appears on: Kustomization ) KustomizationSpec defines the desired state of a kustomization. Field Description dependsOn []string (Optional) A list of kustomizations that must be ready before this kustomization can be applied. interval Kubernetes meta/v1.Duration The interval at which to apply the kustomization. path string Path to the directory containing the kustomization file. prune bool Enables garbage collection. healthChecks []WorkloadReference (Optional) A list of workloads (Deployments, DaemonSets and StatefulSets) to be included in the health assessment. serviceAccount ServiceAccount (Optional) The Kubernetes service account used for applying the kustomization. sourceRef Kubernetes core/v1.TypedLocalObjectReference Reference of the source where the kustomization file is. suspend bool (Optional) This flag tells the controller to suspend subsequent kustomize executions, it does not apply to already started executions. Defaults to false. timeout Kubernetes meta/v1.Duration (Optional) Timeout for validation, apply and health checking operations. Defaults to \u2018Interval\u2019 duration. validation string (Optional) Validate the Kubernetes objects before applying them on the cluster. The validation strategy can be \u2018client\u2019 (local dry-run) or \u2018server\u2019 (APIServer dry-run). KustomizationStatus ( Appears on: Kustomization ) KustomizationStatus defines the observed state of a kustomization. Field Description conditions []Condition (Optional) lastAppliedRevision string (Optional) The last successfully applied revision. The revision format for Git sources is / . snapshot Snapshot (Optional) The last successfully applied revision metadata. ProfileSpec ( Appears on: Profile ) ProfileSpec defines the desired state of Profile Field Description alert AlertProvider (Optional) Alerting configuration of the kustomizations targeted by this profile. kustomizations []string The list of kustomizations that this profile applies to. ProfileStatus ( Appears on: Profile ) ProfileStatus defines the observed state of Profile Field Description conditions []Condition (Optional) ServiceAccount ( Appears on: KustomizationSpec ) ServiceAccount defines a reference to a Kubernetes service account. Field Description name string Name is the name of the service account being referenced. namespace string Namespace is the namespace of the service account being referenced. Snapshot ( Appears on: KustomizationStatus ) Snapshot holds the metadata of the Kubernetes objects generated for a source revision Field Description revision string The source revision. entries []SnapshotEntry A list of Kubernetes kinds grouped by namespace. SnapshotEntry ( Appears on: Snapshot ) Snapshot holds the metadata of namespaced Kubernetes objects Field Description namespace string (Optional) The namespace of this entry. kinds map[string]string The list of Kubernetes kinds. Unsortable ( [][]string alias) WorkloadReference ( Appears on: KustomizationSpec ) WorkloadReference defines a reference to a Deployment, DaemonSet or StatefulSet. Field Description kind string Kind is the type of resource being referenced. name string Name is the name of resource being referenced. namespace string Namespace is the namespace of resource being referenced. This page was automatically generated with gen-crd-api-reference-docs","title":"Kustomize API Reference"},{"location":"components/kustomize/controller/","text":"Kustomize Controller \u00b6 The kustomize-controller is a Kubernetes operator, specialized in running continuous delivery pipelines for infrastructure and workloads defined with Kubernetes manifests and assembled with Kustomize. Features: Reconciles the cluster state from multiple sources (provided by source-controller) Generates manifests with Kustomize (from plain Kubernetes yamls or Kustomize overlays) Validates manifests against Kubernetes API Impersonates service accounts (multi-tenancy RBAC) Health assessment of the deployed workloads Runs pipelines in a specific order (depends-on relationship) Prunes objects removed from source (garbage collection) Reports cluster state changes (Slack/Discord) Links: Source code fluxcd/kustomize-controller Specification docs","title":"Overview"},{"location":"components/kustomize/controller/#kustomize-controller","text":"The kustomize-controller is a Kubernetes operator, specialized in running continuous delivery pipelines for infrastructure and workloads defined with Kubernetes manifests and assembled with Kustomize. Features: Reconciles the cluster state from multiple sources (provided by source-controller) Generates manifests with Kustomize (from plain Kubernetes yamls or Kustomize overlays) Validates manifests against Kubernetes API Impersonates service accounts (multi-tenancy RBAC) Health assessment of the deployed workloads Runs pipelines in a specific order (depends-on relationship) Prunes objects removed from source (garbage collection) Reports cluster state changes (Slack/Discord) Links: Source code fluxcd/kustomize-controller Specification docs","title":"Kustomize Controller"},{"location":"components/kustomize/kustomization/","text":"Kustomization \u00b6 The Kustomization API defines a pipeline for fetching, building, testing and applying Kubernetes manifests. Specification \u00b6 A kustomization object defines the source of Kubernetes manifests by referencing an object managed by source-controller , the path to the kustomization file within that source, and the interval at which the kustomize build output is applied on the cluster. type KustomizationSpec struct { // A list of kustomization that must be ready before this // kustomization can be applied. // +optional DependsOn [] string `json:\"dependsOn,omitempty\"` // The interval at which to apply the kustomization. // +required Interval metav1 . Duration `json:\"interval\"` // Path to the directory containing the kustomization file. // +kubebuilder:validation:Pattern=\"^\\\\./\" // +required Path string `json:\"path\"` // Enables garbage collection. // +required Prune bool `json:\"prune\"` // A list of workloads (Deployments, DaemonSets and StatefulSets) // to be included in the health assessment. // +optional HealthChecks [] WorkloadReference `json:\"healthChecks,omitempty\"` // The Kubernetes service account used for applying the kustomization. // +optional ServiceAccount * ServiceAccount `json:\"serviceAccount,omitempty\"` // Reference of the source where the kustomization file is. // +required SourceRef corev1 . TypedLocalObjectReference `json:\"sourceRef\"` // This flag tells the controller to suspend subsequent kustomize executions, // it does not apply to already started executions. Defaults to false. // +optional Suspend bool `json:\"suspend,omitempty\"` // Timeout for validation, apply and health checking operations. // Defaults to 'Interval' duration. // +optional Timeout * metav1 . Duration `json:\"timeout,omitempty\"` // Validate the Kubernetes objects before applying them on the cluster. // The validation strategy can be 'client' (local dry-run) or 'server' (APIServer dry-run). // +kubebuilder:validation:Enum=client;server // +optional Validation string `json:\"validation,omitempty\"` } The status sub-resource describes the result of the last kustomization execution: type KustomizationStatus struct { // +optional Conditions [] Condition `json:\"conditions,omitempty\"` // The last successfully applied revision. // The revision format for Git sources is <branch|tag>/<commit-sha>. // +optional LastAppliedRevision string `json:\"lastAppliedRevision,omitempty\"` // The last successfully applied revision metadata. // +optional Snapshot * Snapshot `json:\"snapshot\"` } Status condition types: const ( // ReadyCondition represents the fact that a given kustomization has passed // validation and was successfully applied on the cluster. ReadyCondition string = \"Ready\" ) Status condition reasons: const ( // ApplySucceedReason represents the fact that the kustomization apply succeed. ApplySucceedReason string = \"ApplySucceed\" // ApplyFailedReason represents the fact that the kustomization apply failed. ApplyFailedReason string = \"ApplyFailed\" // ArtifactFailedReason represents the fact that the artifact download failed. ArtifactFailedReason string = \"ArtifactFailed\" // BuildFailedReason represents the fact that the kustomize build command failed. BuildFailedReason string = \"BuildFailed\" // DependencyNotReady represents the fact that the one of the dependencies is not ready. DependencyNotReadyReason string = \"DependencyNotReady\" // HealthCheckFailedReason represents the fact that the one of the health check failed. HealthCheckFailedReason string = \"HealthCheckFailed\" // InitializedReason represents the fact that a given resource has been initialized. InitializedReason string = \"Initialized\" // ProgressingReason represents the fact that a kustomization reconciliation // is underway. ProgressingReason string = \"Progressing\" // PruneFailedReason represents the fact that the kustomization pruning failed. PruneFailedReason string = \"PruneFailed\" // SuspendedReason represents the fact that the kustomization execution is suspended. SuspendedReason string = \"Suspended\" // ValidationFailedReason represents the fact that the dry-run apply failed. ValidationFailedReason string = \"ValidationFailed\" ) Source reference \u00b6 The kustomization spec.sourceRef is a reference to an object managed by source-controller . When the source revision changes, it generates a Kubernetes event that triggers a kustomize build and apply. Source supported types: GitRepository Note that the source should contain the kustomization.yaml and all the Kubernetes manifests and configuration files referenced in the kustomization.yaml. If your repository contains only plain manifests, then you should enable kustomization.yaml generation. Generate kustomization.yaml \u00b6 If your repository contains plain Kubernetes manifests, the kustomization.yaml file is automatically generated for all the Kubernetes manifests in the spec.path and sub-directories. If the spec.prune is enable, the controller generates a label transformer to enable garbage collection . Reconciliation \u00b6 The kustomization spec.interval tells the controller at which interval to fetch the Kubernetes manifest for the source, build the kustomization and apply it on the cluster. The interval time units are s , m and h e.g. interval: 5m , the minimum value should be over 60 seconds. The kustomization execution can be suspended by setting spec.susped to true . The controller can be told to execute the kustomization outside of the specified interval by annotating the kustomization object with: const ( // SyncAtAnnotation is the annotation used for triggering a // sync outside of the specified schedule. SyncAtAnnotation string = \"kustomize.fluxcd.io/syncAt\" ) On-demand execution example: kubectl annotate --overwrite kustomization/podinfo kustomize.fluxcd.io/syncAt = \" $( date +%s ) \" Garbage collection \u00b6 To enable garbage collection, set spec.prune to true . Garbage collection means that the Kubernetes objects that were previously applied on the cluster but are missing from the current source revision, are removed from cluster automatically. Garbage collection is also performed when a Kustomization object is deleted, triggering a removal of all Kubernetes objects previously applied on the cluster. Health assessment \u00b6 A kustomization can contain a series of health checks used to determine the rollout status of the deployed workloads. A health check entry can reference one of the following Kubernetes types: Deployment, DaemonSet or StatefulSet. Assuming the kustomization source contains a Kubernetes Deployment named backend , a health check can be defined as follows: apiVersion : kustomize.fluxcd.io/v1alpha1 kind : Kustomization metadata : name : backend spec : interval : 5m path : \"./webapp/backend/\" prune : true sourceRef : kind : GitRepository name : webapp healthChecks : - kind : Deployment name : backend namespace : dev timeout : 2m After applying the kustomize build output, the controller verifies if the rollout completed successfully. If the deployment was successful, the kustomization ready condition is marked as true , if the rollout failed, or if it takes more than the specified timeout to complete, then the kustomization ready condition is set to false . If the deployment becomes healthy on the next execution, then the kustomization is marked as ready. Kustomization dependencies \u00b6 When applying a kustomization, you may need to make sure other resources exist before the workloads defined in your kustomization are deployed. For example, a namespace must exist before applying resources to it. With spec.dependsOn you can specify that the execution of a kustomization follows another. When you add dependsOn entries to a kustomization, that kustomization is applied only after all of its dependencies are ready. The readiness state of a kustomization is determined by its last apply status condition. Assuming two kustomizations: * common - contains a namespace and service accounts definitions * backend - contains the workloads to be deployed in that namespace You can instruct the controller to apply the common kustomization before backend : apiVersion : kustomize.fluxcd.io/v1alpha1 kind : Kustomization metadata : name : common spec : interval : 5m path : \"./webapp/common/\" prune : true sourceRef : kind : GitRepository name : webapp --- apiVersion : kustomize.fluxcd.io/v1alpha1 kind : Kustomization metadata : name : backend spec : dependsOn : - common interval : 5m path : \"./webapp/backend/\" prune : true sourceRef : kind : GitRepository name : webapp When combined with health assessment, a kustomization will run after all its dependencies health checks are passing. For example, a service mesh proxy injector should be running before deploying applications inside the mesh. apiVersion : kustomize.fluxcd.io/v1alpha1 kind : Kustomization metadata : name : istio spec : interval : 5m path : \"./profiles/default/\" sourceRef : kind : GitRepository name : istio healthChecks : - kind : Deployment name : istiod namespace : istio-system timeout : 2m --- apiVersion : kustomize.fluxcd.io/v1alpha1 kind : Kustomization metadata : name : backend spec : dependsOn : - common - istio interval : 5m path : \"./webapp/backend/\" prune : true sourceRef : kind : GitRepository name : webapp Note that circular dependencies between kustomizations must be avoided, otherwise the interdependent kustomizations will never be applied on the cluster. Role-based access control \u00b6 By default, a kustomization apply runs under the cluster admin account and can create, modify, delete cluster level objects (namespaces, CRDs, etc) and namespeced objects (deployments, ingresses, etc). For certain kustomizations a cluster admin may wish to control what types of Kubernetes objects can be reconciled and under which namespaces. To restrict a kustomization, one can assign a service account under which the reconciliation is performed. Assuming you want to restrict a group of kustomizations to a single namespace, you can create an account with a role binding that grants access only to that namespace: apiVersion : v1 kind : Namespace metadata : name : webapp --- apiVersion : v1 kind : ServiceAccount metadata : name : webapp-reconciler namespace : webapp --- apiVersion : rbac.authorization.k8s.io/v1 kind : Role metadata : name : webapp-reconciler namespace : webapp rules : - apiGroups : [ '*' ] resources : [ '*' ] verbs : [ '*' ] --- apiVersion : rbac.authorization.k8s.io/v1 kind : RoleBinding metadata : name : webapp-reconciler namespace : webapp roleRef : apiGroup : rbac.authorization.k8s.io kind : Role name : webapp-reconciler subjects : - kind : ServiceAccount name : webapp-reconciler namespace : webapp Note that the namespace, RBAC and service account manifests should be placed in a Git source and applied with a kustomization. The kustomizations that are running under that service account should depend-on the one that contains the account. Create a kustomization that prevents altering the cluster state outside of the webapp namespace: apiVersion : kustomize.fluxcd.io/v1alpha1 kind : Kustomization metadata : name : backend spec : dependsOn : - common serviceAccount : name : webapp-reconciler namespace : webapp interval : 5m path : \"./webapp/backend/\" prune : true sourceRef : kind : GitRepository name : webapp When the controller reconciles the frontend-webapp kustomization, it will impersonate the webapp-reconciler account. If the kustomization contains cluster level objects like CRDs or objects belonging to a different namespace, the reconciliation will fail since the account it runs under has no permissions to alter objects outside of the webapp namespace. Status \u00b6 When the controller completes a kustomization apply, reports the result in the status sub-resource. A successful reconciliation sets the ready condition to true and updates the revision field: status : conditions : - lastTransitionTime : \"2020-04-23T19:28:48Z\" message : kustomization was successfully applied reason : ApplySucceed status : \"True\" type : Ready lastAppliedRevision : master/a1afe267b54f38b46b487f6e938a6fd508278c07 You can wait for the kustomize controller to complete a reconciliation with: kubectl wait kustomization/backend --for = condition = ready The controller logs the Kubernetes objects: { \"level\" : \"info\" , \"ts\" : 1587195448.071468 , \"logger\" : \"controllers.Kustomization\" , \"msg\" : \"Kustomization applied in 1.436096591s\" , \"kustomization\" : \"default/backend\" , \"output\" : { \"service/backend\" : \"created\" , \"deployment.apps/backend\" : \"created\" , \"horizontalpodautoscaler.autoscaling/backend\" : \"created\" } } A failed reconciliation sets the ready condition to false : status : conditions : - lastTransitionTime : \"2020-04-23T19:29:48Z\" message : 'server-side validation failed' reason : ValidationFailed status : \"False\" type : Ready lastAppliedRevision : master/a1afe267b54f38b46b487f6e938a6fd508278c07 Note that the last applied revision is updated only on a successful reconciliation. When a reconciliation fails, the controller logs the error: { \"level\" : \"error\" , \"ts\" : 1587195448.071468 , \"logger\" : \"controllers.Kustomization\" , \"msg\" : \"server-side validation failed\" , \"kustomization\" : \"default/backend\" , \"error\" : \"The Service 'backend' is invalid: spec.type: Unsupported value: 'Ingress'\" }","title":"Kustomization CRD"},{"location":"components/kustomize/kustomization/#kustomization","text":"The Kustomization API defines a pipeline for fetching, building, testing and applying Kubernetes manifests.","title":"Kustomization"},{"location":"components/kustomize/kustomization/#specification","text":"A kustomization object defines the source of Kubernetes manifests by referencing an object managed by source-controller , the path to the kustomization file within that source, and the interval at which the kustomize build output is applied on the cluster. type KustomizationSpec struct { // A list of kustomization that must be ready before this // kustomization can be applied. // +optional DependsOn [] string `json:\"dependsOn,omitempty\"` // The interval at which to apply the kustomization. // +required Interval metav1 . Duration `json:\"interval\"` // Path to the directory containing the kustomization file. // +kubebuilder:validation:Pattern=\"^\\\\./\" // +required Path string `json:\"path\"` // Enables garbage collection. // +required Prune bool `json:\"prune\"` // A list of workloads (Deployments, DaemonSets and StatefulSets) // to be included in the health assessment. // +optional HealthChecks [] WorkloadReference `json:\"healthChecks,omitempty\"` // The Kubernetes service account used for applying the kustomization. // +optional ServiceAccount * ServiceAccount `json:\"serviceAccount,omitempty\"` // Reference of the source where the kustomization file is. // +required SourceRef corev1 . TypedLocalObjectReference `json:\"sourceRef\"` // This flag tells the controller to suspend subsequent kustomize executions, // it does not apply to already started executions. Defaults to false. // +optional Suspend bool `json:\"suspend,omitempty\"` // Timeout for validation, apply and health checking operations. // Defaults to 'Interval' duration. // +optional Timeout * metav1 . Duration `json:\"timeout,omitempty\"` // Validate the Kubernetes objects before applying them on the cluster. // The validation strategy can be 'client' (local dry-run) or 'server' (APIServer dry-run). // +kubebuilder:validation:Enum=client;server // +optional Validation string `json:\"validation,omitempty\"` } The status sub-resource describes the result of the last kustomization execution: type KustomizationStatus struct { // +optional Conditions [] Condition `json:\"conditions,omitempty\"` // The last successfully applied revision. // The revision format for Git sources is <branch|tag>/<commit-sha>. // +optional LastAppliedRevision string `json:\"lastAppliedRevision,omitempty\"` // The last successfully applied revision metadata. // +optional Snapshot * Snapshot `json:\"snapshot\"` } Status condition types: const ( // ReadyCondition represents the fact that a given kustomization has passed // validation and was successfully applied on the cluster. ReadyCondition string = \"Ready\" ) Status condition reasons: const ( // ApplySucceedReason represents the fact that the kustomization apply succeed. ApplySucceedReason string = \"ApplySucceed\" // ApplyFailedReason represents the fact that the kustomization apply failed. ApplyFailedReason string = \"ApplyFailed\" // ArtifactFailedReason represents the fact that the artifact download failed. ArtifactFailedReason string = \"ArtifactFailed\" // BuildFailedReason represents the fact that the kustomize build command failed. BuildFailedReason string = \"BuildFailed\" // DependencyNotReady represents the fact that the one of the dependencies is not ready. DependencyNotReadyReason string = \"DependencyNotReady\" // HealthCheckFailedReason represents the fact that the one of the health check failed. HealthCheckFailedReason string = \"HealthCheckFailed\" // InitializedReason represents the fact that a given resource has been initialized. InitializedReason string = \"Initialized\" // ProgressingReason represents the fact that a kustomization reconciliation // is underway. ProgressingReason string = \"Progressing\" // PruneFailedReason represents the fact that the kustomization pruning failed. PruneFailedReason string = \"PruneFailed\" // SuspendedReason represents the fact that the kustomization execution is suspended. SuspendedReason string = \"Suspended\" // ValidationFailedReason represents the fact that the dry-run apply failed. ValidationFailedReason string = \"ValidationFailed\" )","title":"Specification"},{"location":"components/kustomize/kustomization/#source-reference","text":"The kustomization spec.sourceRef is a reference to an object managed by source-controller . When the source revision changes, it generates a Kubernetes event that triggers a kustomize build and apply. Source supported types: GitRepository Note that the source should contain the kustomization.yaml and all the Kubernetes manifests and configuration files referenced in the kustomization.yaml. If your repository contains only plain manifests, then you should enable kustomization.yaml generation.","title":"Source reference"},{"location":"components/kustomize/kustomization/#generate-kustomizationyaml","text":"If your repository contains plain Kubernetes manifests, the kustomization.yaml file is automatically generated for all the Kubernetes manifests in the spec.path and sub-directories. If the spec.prune is enable, the controller generates a label transformer to enable garbage collection .","title":"Generate kustomization.yaml"},{"location":"components/kustomize/kustomization/#reconciliation","text":"The kustomization spec.interval tells the controller at which interval to fetch the Kubernetes manifest for the source, build the kustomization and apply it on the cluster. The interval time units are s , m and h e.g. interval: 5m , the minimum value should be over 60 seconds. The kustomization execution can be suspended by setting spec.susped to true . The controller can be told to execute the kustomization outside of the specified interval by annotating the kustomization object with: const ( // SyncAtAnnotation is the annotation used for triggering a // sync outside of the specified schedule. SyncAtAnnotation string = \"kustomize.fluxcd.io/syncAt\" ) On-demand execution example: kubectl annotate --overwrite kustomization/podinfo kustomize.fluxcd.io/syncAt = \" $( date +%s ) \"","title":"Reconciliation"},{"location":"components/kustomize/kustomization/#garbage-collection","text":"To enable garbage collection, set spec.prune to true . Garbage collection means that the Kubernetes objects that were previously applied on the cluster but are missing from the current source revision, are removed from cluster automatically. Garbage collection is also performed when a Kustomization object is deleted, triggering a removal of all Kubernetes objects previously applied on the cluster.","title":"Garbage collection"},{"location":"components/kustomize/kustomization/#health-assessment","text":"A kustomization can contain a series of health checks used to determine the rollout status of the deployed workloads. A health check entry can reference one of the following Kubernetes types: Deployment, DaemonSet or StatefulSet. Assuming the kustomization source contains a Kubernetes Deployment named backend , a health check can be defined as follows: apiVersion : kustomize.fluxcd.io/v1alpha1 kind : Kustomization metadata : name : backend spec : interval : 5m path : \"./webapp/backend/\" prune : true sourceRef : kind : GitRepository name : webapp healthChecks : - kind : Deployment name : backend namespace : dev timeout : 2m After applying the kustomize build output, the controller verifies if the rollout completed successfully. If the deployment was successful, the kustomization ready condition is marked as true , if the rollout failed, or if it takes more than the specified timeout to complete, then the kustomization ready condition is set to false . If the deployment becomes healthy on the next execution, then the kustomization is marked as ready.","title":"Health assessment"},{"location":"components/kustomize/kustomization/#kustomization-dependencies","text":"When applying a kustomization, you may need to make sure other resources exist before the workloads defined in your kustomization are deployed. For example, a namespace must exist before applying resources to it. With spec.dependsOn you can specify that the execution of a kustomization follows another. When you add dependsOn entries to a kustomization, that kustomization is applied only after all of its dependencies are ready. The readiness state of a kustomization is determined by its last apply status condition. Assuming two kustomizations: * common - contains a namespace and service accounts definitions * backend - contains the workloads to be deployed in that namespace You can instruct the controller to apply the common kustomization before backend : apiVersion : kustomize.fluxcd.io/v1alpha1 kind : Kustomization metadata : name : common spec : interval : 5m path : \"./webapp/common/\" prune : true sourceRef : kind : GitRepository name : webapp --- apiVersion : kustomize.fluxcd.io/v1alpha1 kind : Kustomization metadata : name : backend spec : dependsOn : - common interval : 5m path : \"./webapp/backend/\" prune : true sourceRef : kind : GitRepository name : webapp When combined with health assessment, a kustomization will run after all its dependencies health checks are passing. For example, a service mesh proxy injector should be running before deploying applications inside the mesh. apiVersion : kustomize.fluxcd.io/v1alpha1 kind : Kustomization metadata : name : istio spec : interval : 5m path : \"./profiles/default/\" sourceRef : kind : GitRepository name : istio healthChecks : - kind : Deployment name : istiod namespace : istio-system timeout : 2m --- apiVersion : kustomize.fluxcd.io/v1alpha1 kind : Kustomization metadata : name : backend spec : dependsOn : - common - istio interval : 5m path : \"./webapp/backend/\" prune : true sourceRef : kind : GitRepository name : webapp Note that circular dependencies between kustomizations must be avoided, otherwise the interdependent kustomizations will never be applied on the cluster.","title":"Kustomization dependencies"},{"location":"components/kustomize/kustomization/#role-based-access-control","text":"By default, a kustomization apply runs under the cluster admin account and can create, modify, delete cluster level objects (namespaces, CRDs, etc) and namespeced objects (deployments, ingresses, etc). For certain kustomizations a cluster admin may wish to control what types of Kubernetes objects can be reconciled and under which namespaces. To restrict a kustomization, one can assign a service account under which the reconciliation is performed. Assuming you want to restrict a group of kustomizations to a single namespace, you can create an account with a role binding that grants access only to that namespace: apiVersion : v1 kind : Namespace metadata : name : webapp --- apiVersion : v1 kind : ServiceAccount metadata : name : webapp-reconciler namespace : webapp --- apiVersion : rbac.authorization.k8s.io/v1 kind : Role metadata : name : webapp-reconciler namespace : webapp rules : - apiGroups : [ '*' ] resources : [ '*' ] verbs : [ '*' ] --- apiVersion : rbac.authorization.k8s.io/v1 kind : RoleBinding metadata : name : webapp-reconciler namespace : webapp roleRef : apiGroup : rbac.authorization.k8s.io kind : Role name : webapp-reconciler subjects : - kind : ServiceAccount name : webapp-reconciler namespace : webapp Note that the namespace, RBAC and service account manifests should be placed in a Git source and applied with a kustomization. The kustomizations that are running under that service account should depend-on the one that contains the account. Create a kustomization that prevents altering the cluster state outside of the webapp namespace: apiVersion : kustomize.fluxcd.io/v1alpha1 kind : Kustomization metadata : name : backend spec : dependsOn : - common serviceAccount : name : webapp-reconciler namespace : webapp interval : 5m path : \"./webapp/backend/\" prune : true sourceRef : kind : GitRepository name : webapp When the controller reconciles the frontend-webapp kustomization, it will impersonate the webapp-reconciler account. If the kustomization contains cluster level objects like CRDs or objects belonging to a different namespace, the reconciliation will fail since the account it runs under has no permissions to alter objects outside of the webapp namespace.","title":"Role-based access control"},{"location":"components/kustomize/kustomization/#status","text":"When the controller completes a kustomization apply, reports the result in the status sub-resource. A successful reconciliation sets the ready condition to true and updates the revision field: status : conditions : - lastTransitionTime : \"2020-04-23T19:28:48Z\" message : kustomization was successfully applied reason : ApplySucceed status : \"True\" type : Ready lastAppliedRevision : master/a1afe267b54f38b46b487f6e938a6fd508278c07 You can wait for the kustomize controller to complete a reconciliation with: kubectl wait kustomization/backend --for = condition = ready The controller logs the Kubernetes objects: { \"level\" : \"info\" , \"ts\" : 1587195448.071468 , \"logger\" : \"controllers.Kustomization\" , \"msg\" : \"Kustomization applied in 1.436096591s\" , \"kustomization\" : \"default/backend\" , \"output\" : { \"service/backend\" : \"created\" , \"deployment.apps/backend\" : \"created\" , \"horizontalpodautoscaler.autoscaling/backend\" : \"created\" } } A failed reconciliation sets the ready condition to false : status : conditions : - lastTransitionTime : \"2020-04-23T19:29:48Z\" message : 'server-side validation failed' reason : ValidationFailed status : \"False\" type : Ready lastAppliedRevision : master/a1afe267b54f38b46b487f6e938a6fd508278c07 Note that the last applied revision is updated only on a successful reconciliation. When a reconciliation fails, the controller logs the error: { \"level\" : \"error\" , \"ts\" : 1587195448.071468 , \"logger\" : \"controllers.Kustomization\" , \"msg\" : \"server-side validation failed\" , \"kustomization\" : \"default/backend\" , \"error\" : \"The Service 'backend' is invalid: spec.type: Unsupported value: 'Ingress'\" }","title":"Status"},{"location":"components/source/api/","text":"Source API reference Packages: source.fluxcd.io/v1alpha1 source.fluxcd.io/v1alpha1 Package v1alpha1 contains API Schema definitions for the source v1alpha1 API group Resource Types: GitRepository HelmChart HelmRepository GitRepository GitRepository is the Schema for the gitrepositories API Field Description apiVersion string source.fluxcd.io/v1alpha1 kind string GitRepository metadata Kubernetes meta/v1.ObjectMeta Refer to the Kubernetes API documentation for the fields of the metadata field. spec GitRepositorySpec url string The repository URL, can be a HTTP or SSH address. secretRef Kubernetes core/v1.LocalObjectReference (Optional) The secret name containing the Git credentials. For HTTPS repositories the secret must contain username and password fields. For SSH repositories the secret must contain identity, identity.pub and known_hosts fields. interval Kubernetes meta/v1.Duration The interval at which to check for repository updates. timeout Kubernetes meta/v1.Duration (Optional) The timeout for remote git operations like cloning, default to 20s. ref GitRepositoryRef (Optional) The git reference to checkout and monitor for changes, defaults to master branch. verify GitRepositoryVerification (Optional) Verify OpenPGP signature for the commit that HEAD points to. status GitRepositoryStatus HelmChart HelmChart is the Schema for the helmcharts API Field Description apiVersion string source.fluxcd.io/v1alpha1 kind string HelmChart metadata Kubernetes meta/v1.ObjectMeta Refer to the Kubernetes API documentation for the fields of the metadata field. spec HelmChartSpec name string The name of the Helm chart, as made available by the referenced Helm repository. version string (Optional) The chart version semver expression, defaults to latest when omitted. helmRepositoryRef Kubernetes core/v1.LocalObjectReference The name of the HelmRepository the chart is available at. interval Kubernetes meta/v1.Duration The interval at which to check the Helm repository for updates. status HelmChartStatus HelmRepository HelmRepository is the Schema for the helmrepositories API Field Description apiVersion string source.fluxcd.io/v1alpha1 kind string HelmRepository metadata Kubernetes meta/v1.ObjectMeta Refer to the Kubernetes API documentation for the fields of the metadata field. spec HelmRepositorySpec url string The Helm repository URL, a valid URL contains at least a protocol and host. secretRef Kubernetes core/v1.LocalObjectReference (Optional) The name of the secret containing authentication credentials for the Helm repository. For HTTP/S basic auth the secret must contain username and password fields. For TLS the secret must contain caFile, keyFile and caCert fields. interval Kubernetes meta/v1.Duration The interval at which to check the upstream for updates. status HelmRepositoryStatus Artifact ( Appears on: GitRepositoryStatus , HelmChartStatus , HelmRepositoryStatus ) Artifact represents the output of a source synchronisation Field Description path string Path is the local file path of this artifact. url string URL is the HTTP address of this artifact. revision string (Optional) Revision is a human readable identifier traceable in the origin source system. It can be a commit sha, git tag, a helm index timestamp, a helm chart version, a checksum, etc. lastUpdateTime Kubernetes meta/v1.Time LastUpdateTime is the timestamp corresponding to the last update of this artifact. GitRepositoryRef ( Appears on: GitRepositorySpec ) GitRepositoryRef defines the git ref used for pull and checkout operations. Field Description branch string (Optional) The git branch to checkout, defaults to master. tag string (Optional) The git tag to checkout, takes precedence over branch. semver string (Optional) The git tag semver expression, takes precedence over tag. commit string (Optional) The git commit sha to checkout, if specified tag filters will be ignored. GitRepositorySpec ( Appears on: GitRepository ) GitRepositorySpec defines the desired state of a Git repository. Field Description url string The repository URL, can be a HTTP or SSH address. secretRef Kubernetes core/v1.LocalObjectReference (Optional) The secret name containing the Git credentials. For HTTPS repositories the secret must contain username and password fields. For SSH repositories the secret must contain identity, identity.pub and known_hosts fields. interval Kubernetes meta/v1.Duration The interval at which to check for repository updates. timeout Kubernetes meta/v1.Duration (Optional) The timeout for remote git operations like cloning, default to 20s. ref GitRepositoryRef (Optional) The git reference to checkout and monitor for changes, defaults to master branch. verify GitRepositoryVerification (Optional) Verify OpenPGP signature for the commit that HEAD points to. GitRepositoryStatus ( Appears on: GitRepository ) GitRepositoryStatus defines the observed state of a Git repository. Field Description conditions []SourceCondition (Optional) url string (Optional) URL is the download link for the artifact output of the last repository sync. artifact Artifact (Optional) Artifact represents the output of the last successful repository sync. GitRepositoryVerification ( Appears on: GitRepositorySpec ) GitRepositoryVerification defines the OpenPGP signature verification process. Field Description mode string Mode describes what git object should be verified, currently (\u2018head\u2019). secretRef Kubernetes core/v1.LocalObjectReference The secret name containing the public keys of all trusted git authors. HelmChartSpec ( Appears on: HelmChart ) HelmChartSpec defines the desired state of a Helm chart. Field Description name string The name of the Helm chart, as made available by the referenced Helm repository. version string (Optional) The chart version semver expression, defaults to latest when omitted. helmRepositoryRef Kubernetes core/v1.LocalObjectReference The name of the HelmRepository the chart is available at. interval Kubernetes meta/v1.Duration The interval at which to check the Helm repository for updates. HelmChartStatus ( Appears on: HelmChart ) HelmChartStatus defines the observed state of the HelmChart. Field Description conditions []SourceCondition (Optional) url string (Optional) URL is the download link for the last chart pulled. artifact Artifact (Optional) Artifact represents the output of the last successful chart sync. HelmRepositorySpec ( Appears on: HelmRepository ) HelmRepositorySpec defines the reference to a Helm repository. Field Description url string The Helm repository URL, a valid URL contains at least a protocol and host. secretRef Kubernetes core/v1.LocalObjectReference (Optional) The name of the secret containing authentication credentials for the Helm repository. For HTTP/S basic auth the secret must contain username and password fields. For TLS the secret must contain caFile, keyFile and caCert fields. interval Kubernetes meta/v1.Duration The interval at which to check the upstream for updates. HelmRepositoryStatus ( Appears on: HelmRepository ) HelmRepositoryStatus defines the observed state of the HelmRepository. Field Description conditions []SourceCondition (Optional) url string (Optional) URL is the download link for the last index fetched. artifact Artifact (Optional) Artifact represents the output of the last successful repository sync. Source Source interface must be supported by all API types. SourceCondition ( Appears on: GitRepositoryStatus , HelmChartStatus , HelmRepositoryStatus ) SourceCondition contains condition information for a source. Field Description type string Type of the condition, currently (\u2018Ready\u2019). status Kubernetes core/v1.ConditionStatus Status of the condition, one of (\u2018True\u2019, \u2018False\u2019, \u2018Unknown\u2019). lastTransitionTime Kubernetes meta/v1.Time LastTransitionTime is the timestamp corresponding to the last status change of this condition. reason string Reason is a brief machine readable explanation for the condition\u2019s last transition. message string (Optional) Message is a human readable description of the details of the last transition, complementing reason. This page was automatically generated with gen-crd-api-reference-docs","title":"Source API Reference"},{"location":"components/source/controller/","text":"Source Controller \u00b6 The main role of the source management component is to provide a common interface for artifacts acquisition. The source API defines a set of Kubernetes objects that cluster admins and various automated operators can interact with to offload the Git and Helm repositories operations to a dedicated controller. Features: Validate source definitions Authenticate to sources (SSH, user/password, API token) Validate source authenticity (PGP) Detect source changes based on update policies (semver) Fetch resources on-demand and on-a-schedule Package the fetched resources into a well-known format (tar.gz, yaml) Make the artifacts addressable by their source identifier (sha, version, ts) Make the artifacts available in-cluster to interested 3rd parties Notify interested 3rd parties of source changes and availability (status conditions, events, hooks) Links: Source code fluxcd/source-controller Specification docs","title":"Overview"},{"location":"components/source/controller/#source-controller","text":"The main role of the source management component is to provide a common interface for artifacts acquisition. The source API defines a set of Kubernetes objects that cluster admins and various automated operators can interact with to offload the Git and Helm repositories operations to a dedicated controller. Features: Validate source definitions Authenticate to sources (SSH, user/password, API token) Validate source authenticity (PGP) Detect source changes based on update policies (semver) Fetch resources on-demand and on-a-schedule Package the fetched resources into a well-known format (tar.gz, yaml) Make the artifacts addressable by their source identifier (sha, version, ts) Make the artifacts available in-cluster to interested 3rd parties Notify interested 3rd parties of source changes and availability (status conditions, events, hooks) Links: Source code fluxcd/source-controller Specification docs","title":"Source Controller"},{"location":"components/source/gitrepositories/","text":"Git Repositories \u00b6 The GitRepository API defines a source for artifacts coming from Git. The resource exposes the latest synchronized state from Git as an artifact in a gzip compressed TAR archive . Specification \u00b6 Git repository: // GitRepositorySpec gives the specification for fetching a Git repository as // a source. type GitRepositorySpec struct { // The repository URL, can be a HTTP or SSH address. // +kubebuilder:validation:Pattern=\"^(http|https|ssh)://\" URL string `json:\"url\"` // The secret name containing the Git credentials. // For HTTPS repositories the secret must contain username and password // fields. // For SSH repositories the secret must contain identity, identity.pub and // known_hosts fields. // +optional SecretRef * v1 . LocalObjectReference `json:\"secretRef,omitempty\"` // The interval at which to check for repository updates. Interval metav1 . Duration `json:\"interval\"` // The timeout for remote git operations like cloning, default to 20s. // +optional Timeout * metav1 . Duration `json:\"timeout,omitempty\"` // The git reference to checkout and monitor for changes, defaults to // master branch. // +optional Reference * GitRepositoryRef `json:\"ref,omitempty\"` // Verify OpenPGP signature for the commit that HEAD points to. // +optional Verification * GitRepositoryVerification `json:\"verify,omitempty\"` } Git repository reference: // GitRepositoryRef defines the git ref used for pull and checkout operations. type GitRepositoryRef struct { // The git branch to checkout, defaults to master. // +optional Branch string `json:\"branch,omitempty\"` // The git tag to checkout, takes precedence over branch. // +optional Tag string `json:\"tag,omitempty\"` // The git tag semver expression, takes precedence over tag. // +optional SemVer string `json:\"semver,omitempty\"` // The git commit sha to checkout, if specified tag filters will be ignored. // +optional Commit string `json:\"commit,omitempty\"` } Git repository cryptographic provenance verification: // GitRepositoryVerification defines the OpenPGP signature verification process. type GitRepositoryVerification struct { // Mode describes what git object should be verified, currently ('head'). // +kubebuilder:validation:Enum=head Mode string `json:\"mode\"` // The secret name containing the public keys of all trusted git authors. SecretRef corev1 . LocalObjectReference `json:\"secretRef\"` } Status \u00b6 // GitRepositoryStatus defines the observed state of the GitRepository. type GitRepositoryStatus struct { // +optional Conditions [] SourceCondition `json:\"conditions,omitempty\"` // URL is the download link for the artifact output of the last repository // sync. // +optional URL string `json:\"url,omitempty\"` // Artifact represents the output of the last successful repository sync. // +optional Artifact * Artifact `json:\"artifact,omitempty\"` } Condition reasons \u00b6 const ( // GitOperationSucceedReason represents the fact that the git // clone, pull and checkout operations succeeded. GitOperationSucceedReason string = \"GitOperationSucceed\" // GitOperationFailedReason represents the fact that the git // clone, pull or checkout operations failed. GitOperationFailedReason string = \"GitOperationFailed\" ) Artifact \u00b6 The GitRepository API defines a source for artifacts coming from Git. The resource exposes the latest synchronized state from Git as an artifact in a gzip compressed TAR archive ( <commit hash>.tar.gz ). Excluding files \u00b6 Git files ( .git/ , .gitignore , .gitmodules , and .gitattributes ) are excluded from the archive by default, as well as some extensions ( .jpg, .jpeg, .gif, .png, .wmv, .flv, .tar.gz, .zip ) Excluding additional files from the archive is possible by adding a .sourceignore file in the root of the repository. The .sourceignore file follows the .gitignore pattern format , pattern entries may overrule default exclusions. Spec examples \u00b6 Pull the master branch of a public repository every minute: apiVersion : source.fluxcd.io/v1alpha1 kind : GitRepository metadata : name : podinfo namespace : default spec : interval : 1m url : https://github.com/stefanprodan/podinfo Pull a specific branch: apiVersion : source.fluxcd.io/v1alpha1 kind : GitRepository metadata : name : podinfo namespace : default spec : interval : 1m url : https://github.com/stefanprodan/podinfo ref : branch : v3.x Checkout a specific commit from a branch: apiVersion : source.fluxcd.io/v1alpha1 kind : GitRepository metadata : name : podinfo namespace : default spec : interval : 1m url : https://github.com/stefanprodan/podinfo ref : branch : master commit : 363a6a8fe6a7f13e05d34c163b0ef02a777da20a Pull a specific tag: apiVersion : source.fluxcd.io/v1alpha1 kind : GitRepository metadata : name : podinfo namespace : default spec : interval : 1m url : https://github.com/stefanprodan/podinfo ref : tag : 3.2.0 Pull tag based on a semver range : apiVersion : source.fluxcd.io/v1alpha1 kind : GitRepository metadata : name : podinfo namespace : default spec : interval : 1m url : https://github.com/stefanprodan/podinfo ref : semver : \">=3.1.0-rc.1 <3.2.0\" HTTPS authentication (requires a secret with username and password fields): apiVersion : source.fluxcd.io/v1alpha1 kind : GitRepository metadata : name : podinfo namespace : default spec : url : https://github.com/stefanprodan/podinfo secretRef : name : https-credentials --- apiVersion : v1 kind : Secret metadata : name : https-credentials namespace : default type : Opaque data : username : <BASE64> password : <BASE64> SSH authentication (requires a secret with identity and known_hosts fields): apiVersion : source.fluxcd.io/v1alpha1 kind : GitRepository metadata : name : podinfo namespace : default spec : url : ssh://git@github.com/stefanprodan/podinfo secretRef : name : ssh-credentials --- apiVersion : v1 kind : Secret metadata : name : ssh-credentials namespace : default type : Opaque data : identity : <BASE64> identity.pub : <BASE64> known_hosts : <BASE64> Note: that the SSH address does not support SCP syntax. The URL format is ssh://user@host:port/org/repository . Example of generating the SSH credentials secret: ssh-keygen -q -N \"\" -f ./identity ssh-keyscan github.com > ./known_hosts kubectl create secret generic ssh-credentials \\ --from-file = ./identity \\ --from-file = ./identity.pub \\ --from-file = ./known_hosts Verify the OpenPGP signature for the commit that master branch HEAD points to: apiVersion : source.fluxcd.io/v1alpha1 kind : GitRepository metadata : name : podinfo namespace : default spec : interval : 1m url : https://github.com/stefanprodan/podinfo ref : branch : master verify : mode : head secretRef : name : pgp-public-keys --- apiVersion : v1 kind : Secret metadata : name : pgp-public-keys namespace : default type : Opaque data : author1.asc : <BASE64> author2.asc : <BASE64> Example of generating the PGP public keys secret: gpg --export --armor 3CB12BA185C47B67 > author1.asc gpg --export --armor 6A7436E8790F8689 > author2.asc kubectl create secret generic pgp-public-keys \\ --from-file = author1.asc \\ --from-file = author2.asc Status examples \u00b6 Successful sync: status : artifact : lastUpdateTime : \"2020-04-07T06:59:23Z\" path : /data/gitrepository/default/podinfo/363a6a8fe6a7f13e05d34c163b0ef02a777da20a.tar.gz revision : master/363a6a8fe6a7f13e05d34c163b0ef02a777da20a url : http://<host>/gitrepository/default/podinfo/363a6a8fe6a7f13e05d34c163b0ef02a777da20a.tar.gz conditions : - lastTransitionTime : \"2020-04-07T06:59:23Z\" message : 'Git repoistory artifacts are available at: /data/gitrepository/default/podinfo/363a6a8fe6a7f13e05d34c163b0ef02a777da20a.tar.gz' reason : GitOperationSucceed status : \"True\" type : Ready url : http://<host>/gitrepository/default/podinfo/latest.tar.gz Failed authentication: status : conditions : - lastTransitionTime : \"2020-04-06T06:48:59Z\" message : 'git clone error ssh: handshake failed: ssh: unable to authenticate, attempted methods [none publickey], no supported methods remain' reason : AuthenticationFailed status : \"False\" type : Ready Failed PGP signature verification: status : conditions : - lastTransitionTime : \"2020-04-06T06:48:59Z\" message : 'PGP signature of {Stefan Prodan 2020-04-04 13:36:58 +0300 +0300} can not be verified' reason : VerificationFailed status : \"False\" type : Ready Wait for ready condition: kubectl wait gitrepository/podinfo --for = condition = ready --timeout = 1m","title":"GitRepository CRD"},{"location":"components/source/gitrepositories/#git-repositories","text":"The GitRepository API defines a source for artifacts coming from Git. The resource exposes the latest synchronized state from Git as an artifact in a gzip compressed TAR archive .","title":"Git Repositories"},{"location":"components/source/gitrepositories/#specification","text":"Git repository: // GitRepositorySpec gives the specification for fetching a Git repository as // a source. type GitRepositorySpec struct { // The repository URL, can be a HTTP or SSH address. // +kubebuilder:validation:Pattern=\"^(http|https|ssh)://\" URL string `json:\"url\"` // The secret name containing the Git credentials. // For HTTPS repositories the secret must contain username and password // fields. // For SSH repositories the secret must contain identity, identity.pub and // known_hosts fields. // +optional SecretRef * v1 . LocalObjectReference `json:\"secretRef,omitempty\"` // The interval at which to check for repository updates. Interval metav1 . Duration `json:\"interval\"` // The timeout for remote git operations like cloning, default to 20s. // +optional Timeout * metav1 . Duration `json:\"timeout,omitempty\"` // The git reference to checkout and monitor for changes, defaults to // master branch. // +optional Reference * GitRepositoryRef `json:\"ref,omitempty\"` // Verify OpenPGP signature for the commit that HEAD points to. // +optional Verification * GitRepositoryVerification `json:\"verify,omitempty\"` } Git repository reference: // GitRepositoryRef defines the git ref used for pull and checkout operations. type GitRepositoryRef struct { // The git branch to checkout, defaults to master. // +optional Branch string `json:\"branch,omitempty\"` // The git tag to checkout, takes precedence over branch. // +optional Tag string `json:\"tag,omitempty\"` // The git tag semver expression, takes precedence over tag. // +optional SemVer string `json:\"semver,omitempty\"` // The git commit sha to checkout, if specified tag filters will be ignored. // +optional Commit string `json:\"commit,omitempty\"` } Git repository cryptographic provenance verification: // GitRepositoryVerification defines the OpenPGP signature verification process. type GitRepositoryVerification struct { // Mode describes what git object should be verified, currently ('head'). // +kubebuilder:validation:Enum=head Mode string `json:\"mode\"` // The secret name containing the public keys of all trusted git authors. SecretRef corev1 . LocalObjectReference `json:\"secretRef\"` }","title":"Specification"},{"location":"components/source/gitrepositories/#status","text":"// GitRepositoryStatus defines the observed state of the GitRepository. type GitRepositoryStatus struct { // +optional Conditions [] SourceCondition `json:\"conditions,omitempty\"` // URL is the download link for the artifact output of the last repository // sync. // +optional URL string `json:\"url,omitempty\"` // Artifact represents the output of the last successful repository sync. // +optional Artifact * Artifact `json:\"artifact,omitempty\"` }","title":"Status"},{"location":"components/source/gitrepositories/#condition-reasons","text":"const ( // GitOperationSucceedReason represents the fact that the git // clone, pull and checkout operations succeeded. GitOperationSucceedReason string = \"GitOperationSucceed\" // GitOperationFailedReason represents the fact that the git // clone, pull or checkout operations failed. GitOperationFailedReason string = \"GitOperationFailed\" )","title":"Condition reasons"},{"location":"components/source/gitrepositories/#artifact","text":"The GitRepository API defines a source for artifacts coming from Git. The resource exposes the latest synchronized state from Git as an artifact in a gzip compressed TAR archive ( <commit hash>.tar.gz ).","title":"Artifact"},{"location":"components/source/gitrepositories/#excluding-files","text":"Git files ( .git/ , .gitignore , .gitmodules , and .gitattributes ) are excluded from the archive by default, as well as some extensions ( .jpg, .jpeg, .gif, .png, .wmv, .flv, .tar.gz, .zip ) Excluding additional files from the archive is possible by adding a .sourceignore file in the root of the repository. The .sourceignore file follows the .gitignore pattern format , pattern entries may overrule default exclusions.","title":"Excluding files"},{"location":"components/source/gitrepositories/#spec-examples","text":"Pull the master branch of a public repository every minute: apiVersion : source.fluxcd.io/v1alpha1 kind : GitRepository metadata : name : podinfo namespace : default spec : interval : 1m url : https://github.com/stefanprodan/podinfo Pull a specific branch: apiVersion : source.fluxcd.io/v1alpha1 kind : GitRepository metadata : name : podinfo namespace : default spec : interval : 1m url : https://github.com/stefanprodan/podinfo ref : branch : v3.x Checkout a specific commit from a branch: apiVersion : source.fluxcd.io/v1alpha1 kind : GitRepository metadata : name : podinfo namespace : default spec : interval : 1m url : https://github.com/stefanprodan/podinfo ref : branch : master commit : 363a6a8fe6a7f13e05d34c163b0ef02a777da20a Pull a specific tag: apiVersion : source.fluxcd.io/v1alpha1 kind : GitRepository metadata : name : podinfo namespace : default spec : interval : 1m url : https://github.com/stefanprodan/podinfo ref : tag : 3.2.0 Pull tag based on a semver range : apiVersion : source.fluxcd.io/v1alpha1 kind : GitRepository metadata : name : podinfo namespace : default spec : interval : 1m url : https://github.com/stefanprodan/podinfo ref : semver : \">=3.1.0-rc.1 <3.2.0\" HTTPS authentication (requires a secret with username and password fields): apiVersion : source.fluxcd.io/v1alpha1 kind : GitRepository metadata : name : podinfo namespace : default spec : url : https://github.com/stefanprodan/podinfo secretRef : name : https-credentials --- apiVersion : v1 kind : Secret metadata : name : https-credentials namespace : default type : Opaque data : username : <BASE64> password : <BASE64> SSH authentication (requires a secret with identity and known_hosts fields): apiVersion : source.fluxcd.io/v1alpha1 kind : GitRepository metadata : name : podinfo namespace : default spec : url : ssh://git@github.com/stefanprodan/podinfo secretRef : name : ssh-credentials --- apiVersion : v1 kind : Secret metadata : name : ssh-credentials namespace : default type : Opaque data : identity : <BASE64> identity.pub : <BASE64> known_hosts : <BASE64> Note: that the SSH address does not support SCP syntax. The URL format is ssh://user@host:port/org/repository . Example of generating the SSH credentials secret: ssh-keygen -q -N \"\" -f ./identity ssh-keyscan github.com > ./known_hosts kubectl create secret generic ssh-credentials \\ --from-file = ./identity \\ --from-file = ./identity.pub \\ --from-file = ./known_hosts Verify the OpenPGP signature for the commit that master branch HEAD points to: apiVersion : source.fluxcd.io/v1alpha1 kind : GitRepository metadata : name : podinfo namespace : default spec : interval : 1m url : https://github.com/stefanprodan/podinfo ref : branch : master verify : mode : head secretRef : name : pgp-public-keys --- apiVersion : v1 kind : Secret metadata : name : pgp-public-keys namespace : default type : Opaque data : author1.asc : <BASE64> author2.asc : <BASE64> Example of generating the PGP public keys secret: gpg --export --armor 3CB12BA185C47B67 > author1.asc gpg --export --armor 6A7436E8790F8689 > author2.asc kubectl create secret generic pgp-public-keys \\ --from-file = author1.asc \\ --from-file = author2.asc","title":"Spec examples"},{"location":"components/source/gitrepositories/#status-examples","text":"Successful sync: status : artifact : lastUpdateTime : \"2020-04-07T06:59:23Z\" path : /data/gitrepository/default/podinfo/363a6a8fe6a7f13e05d34c163b0ef02a777da20a.tar.gz revision : master/363a6a8fe6a7f13e05d34c163b0ef02a777da20a url : http://<host>/gitrepository/default/podinfo/363a6a8fe6a7f13e05d34c163b0ef02a777da20a.tar.gz conditions : - lastTransitionTime : \"2020-04-07T06:59:23Z\" message : 'Git repoistory artifacts are available at: /data/gitrepository/default/podinfo/363a6a8fe6a7f13e05d34c163b0ef02a777da20a.tar.gz' reason : GitOperationSucceed status : \"True\" type : Ready url : http://<host>/gitrepository/default/podinfo/latest.tar.gz Failed authentication: status : conditions : - lastTransitionTime : \"2020-04-06T06:48:59Z\" message : 'git clone error ssh: handshake failed: ssh: unable to authenticate, attempted methods [none publickey], no supported methods remain' reason : AuthenticationFailed status : \"False\" type : Ready Failed PGP signature verification: status : conditions : - lastTransitionTime : \"2020-04-06T06:48:59Z\" message : 'PGP signature of {Stefan Prodan 2020-04-04 13:36:58 +0300 +0300} can not be verified' reason : VerificationFailed status : \"False\" type : Ready Wait for ready condition: kubectl wait gitrepository/podinfo --for = condition = ready --timeout = 1m","title":"Status examples"},{"location":"components/source/helmrepositories/","text":"Helm Repositories \u00b6 The HelmRepository API defines a source for Helm repositories. The resource exposes the latest synchronized repository index as an artifact. Specification \u00b6 Helm repository: // HelmRepositorySpec defines the reference to a Helm repository. type HelmRepositorySpec struct { // The Helm repository URL, a valid URL contains at least a // protocol and host. // +required URL string `json:\"url\"` // The name of the secret containing authentication credentials // for the Helm repository. // For HTTP/S basic auth the secret must contain username and password // fields. // For TLS the secret must contain caFile, keyFile and caCert fields. // +optional SecretRef * v1 . LocalObjectReference `json:\"secretRef,omitempty\"` // The interval at which to check the upstream for updates. // +required Interval metav1 . Duration `json:\"interval\"` } Status \u00b6 // HelmRepositoryStatus defines the observed state of the HelmRepository. type HelmRepositoryStatus struct { // +optional Conditions [] SourceCondition `json:\"conditions,omitempty\"` // URL is the download link for the last index fetched. // +optional URL string `json:\"url,omitempty\"` // Artifact represents the output of the last successful repository sync. // +optional Artifact * Artifact `json:\"artifact,omitempty\"` } Condition reasons \u00b6 const ( // IndexationFailedReason represents the fact that the indexation // of the given Helm repository failed. IndexationFailedReason string = \"IndexationFailed\" // IndexationSucceededReason represents the fact that the indexation // of the given Helm repository succeeded. IndexationSucceedReason string = \"IndexationSucceed\" ) Spec examples \u00b6 Pull the index of a public Helm repository every ten minutes: apiVersion : source.fluxcd.io/v1alpha1 kind : HelmRepository metadata : name : stable namespace : default spec : url : https://kubernetes-charts.storage.googleapis.com/ interval : 10m Pull the index of a private Helm repository every minute: apiVersion : source.fluxcd.io/v1alpha1 kind : HelmRepository metadata : name : private namespace : default spec : url : https://charts.example.com secretRef : name : https-credentials interval : 1m --- apiVersion : v1 kind : Secret metadata : name : https-credentials namespace : default type : Opaque data : username : <BASE64> password : <BASE64> certFile : <BASE64> keyFile : <BASE64> caFile : <BASE64> Status examples \u00b6 Successful indexation: status : url : http://<host>/helmrepository/default/stable/index.yaml conditions : - lastTransitionTime : \"2020-04-10T09:34:45Z\" message : Helm repository index is available at /data/helmrepository/default/stable/index-21c195d78e699e4b656e2885887d019627838993.yaml reason : IndexationSucceeded status : \"True\" type : Ready Failed indexation: status : conditions : - lastTransitionTime : \"2020-04-10T09:27:21Z\" message : 'failed to fetch https://invalid.example.com/index.yaml : 404 Not Found' reason : IndexationFailed status : \"False\" type : Ready Invalid repository URL: status : conditions : - lastTransitionTime : \"2020-04-10T09:27:21Z\" message : scheme \"invalid\" not supported reason : URLInvalid status : \"False\" type : Ready Wait for ready condition: kubectl wait helmrepository/stable --for = condition = ready --timeout = 1m","title":"HelmRepository CRD"},{"location":"components/source/helmrepositories/#helm-repositories","text":"The HelmRepository API defines a source for Helm repositories. The resource exposes the latest synchronized repository index as an artifact.","title":"Helm Repositories"},{"location":"components/source/helmrepositories/#specification","text":"Helm repository: // HelmRepositorySpec defines the reference to a Helm repository. type HelmRepositorySpec struct { // The Helm repository URL, a valid URL contains at least a // protocol and host. // +required URL string `json:\"url\"` // The name of the secret containing authentication credentials // for the Helm repository. // For HTTP/S basic auth the secret must contain username and password // fields. // For TLS the secret must contain caFile, keyFile and caCert fields. // +optional SecretRef * v1 . LocalObjectReference `json:\"secretRef,omitempty\"` // The interval at which to check the upstream for updates. // +required Interval metav1 . Duration `json:\"interval\"` }","title":"Specification"},{"location":"components/source/helmrepositories/#status","text":"// HelmRepositoryStatus defines the observed state of the HelmRepository. type HelmRepositoryStatus struct { // +optional Conditions [] SourceCondition `json:\"conditions,omitempty\"` // URL is the download link for the last index fetched. // +optional URL string `json:\"url,omitempty\"` // Artifact represents the output of the last successful repository sync. // +optional Artifact * Artifact `json:\"artifact,omitempty\"` }","title":"Status"},{"location":"components/source/helmrepositories/#condition-reasons","text":"const ( // IndexationFailedReason represents the fact that the indexation // of the given Helm repository failed. IndexationFailedReason string = \"IndexationFailed\" // IndexationSucceededReason represents the fact that the indexation // of the given Helm repository succeeded. IndexationSucceedReason string = \"IndexationSucceed\" )","title":"Condition reasons"},{"location":"components/source/helmrepositories/#spec-examples","text":"Pull the index of a public Helm repository every ten minutes: apiVersion : source.fluxcd.io/v1alpha1 kind : HelmRepository metadata : name : stable namespace : default spec : url : https://kubernetes-charts.storage.googleapis.com/ interval : 10m Pull the index of a private Helm repository every minute: apiVersion : source.fluxcd.io/v1alpha1 kind : HelmRepository metadata : name : private namespace : default spec : url : https://charts.example.com secretRef : name : https-credentials interval : 1m --- apiVersion : v1 kind : Secret metadata : name : https-credentials namespace : default type : Opaque data : username : <BASE64> password : <BASE64> certFile : <BASE64> keyFile : <BASE64> caFile : <BASE64>","title":"Spec examples"},{"location":"components/source/helmrepositories/#status-examples","text":"Successful indexation: status : url : http://<host>/helmrepository/default/stable/index.yaml conditions : - lastTransitionTime : \"2020-04-10T09:34:45Z\" message : Helm repository index is available at /data/helmrepository/default/stable/index-21c195d78e699e4b656e2885887d019627838993.yaml reason : IndexationSucceeded status : \"True\" type : Ready Failed indexation: status : conditions : - lastTransitionTime : \"2020-04-10T09:27:21Z\" message : 'failed to fetch https://invalid.example.com/index.yaml : 404 Not Found' reason : IndexationFailed status : \"False\" type : Ready Invalid repository URL: status : conditions : - lastTransitionTime : \"2020-04-10T09:27:21Z\" message : scheme \"invalid\" not supported reason : URLInvalid status : \"False\" type : Ready Wait for ready condition: kubectl wait helmrepository/stable --for = condition = ready --timeout = 1m","title":"Status examples"},{"location":"get-started/","text":"Get started with GitOps Toolkit \u00b6 Prerequisites \u00b6 You will need two Kubernetes clusters version 1.14 or newer and kubectl version 1.18. For a quick local test, you can use Kubernetes kind . Any other Kubernetes setup will work as well though. In order to follow the guide you'll need a GitHub account and a personal access token that can create repositories (check all permissions under repo ). Export your GitHub personal access token and username: export GITHUB_TOKEN = <your-token> export GITHUB_USER = <your-username> Install the toolkit CLI \u00b6 To install the latest tk release run: curl -s https://toolkit.fluxcd.io/install.sh | sudo bash The install script downloads the tk binary to /usr/local/bin . Binaries for macOS and Linux AMD64 are available for download on the release page . To configure your shell to load tk completions add to your bash profile: # ~/.bashrc or ~/.bash_profile . < ( tk completion ) GitOps workflow \u00b6 You'll be using a dedicated Git repository e.g. fleet-infra to manage one or more Kubernetes clusters. This guide assumes that you have two clusters, one for staging and one for production. Using the toolkit CLI you'll do the following: configure each cluster to synchronise with a directory inside the fleet repository register app sources (git repositories) that contain plain Kubernetes manifests or Kustomize overlays configure app deployments on both clusters (pre-releases on staging, semver releases on production) Staging bootstrap \u00b6 Create the staging cluster using Kubernetes kind or set the kubectl context to an existing cluster: kind create cluster --name staging kubectl cluster-info --context kind-staging Verify that your staging cluster satisfies the prerequisites with: $ tk check --pre \u25ba checking prerequisites \u2714 kubectl 1.18.3 >=1.18.0 \u2714 kubernetes 1.18.2 >=1.14.0 \u2714 prerequisites checks passed Run the bootstrap command: tk bootstrap github \\ --owner = $GITHUB_USER \\ --repository = fleet-infra \\ --path = staging-cluster \\ --personal The bootstrap command creates a repository if one doesn't exist and commits the toolkit components manifests to the master branch at the specified path. Then it configures the target cluster to synchronize with the specified path inside the repository. If you wish to create the repository under a GitHub organization: tk bootstrap github \\ --owner = <organization> \\ --repository = <repo-name> \\ --team = <team1-slug> \\ --team = <team2-slug> \\ --path = staging-cluster Example output: $ tk bootstrap github --owner=gitopsrun --repository=fleet-infra --path=staging-cluster --team=devs \u25ba connecting to github.com \u2714 repository created \u2714 devs team access granted \u2714 repository cloned \u271a generating manifests \u2714 components manifests pushed \u25ba installing components in gitops-system namespace namespace/gitops-system created customresourcedefinition.apiextensions.k8s.io/gitrepositories.source.fluxcd.io created customresourcedefinition.apiextensions.k8s.io/helmcharts.source.fluxcd.io created customresourcedefinition.apiextensions.k8s.io/helmrepositories.source.fluxcd.io created customresourcedefinition.apiextensions.k8s.io/kustomizations.kustomize.fluxcd.io created customresourcedefinition.apiextensions.k8s.io/profiles.kustomize.fluxcd.io created role.rbac.authorization.k8s.io/crd-controller-gitops-system created rolebinding.rbac.authorization.k8s.io/crd-controller-gitops-system created clusterrolebinding.rbac.authorization.k8s.io/cluster-reconciler-gitops-system created service/source-controller created deployment.apps/kustomize-controller created deployment.apps/source-controller created networkpolicy.networking.k8s.io/deny-ingress created Waiting for deployment \"source-controller\" rollout to finish: 0 of 1 updated replicas are available... deployment \"source-controller\" successfully rolled out deployment \"kustomize-controller\" successfully rolled out \u2714 install completed \u25ba configuring deploy key \u2714 deploy key configured \u25ba generating sync manifests \u2714 sync manifests pushed \u25ba applying sync manifests \u25ce waiting for cluster sync \u2714 bootstrap finished If you prefer GitLab, export GITLAB_TOKEN env var and use the command tk bootstrap gitlab . Idempotency It is safe to run the bootstrap command as many times as you want. If the toolkit components are present on the cluster, the bootstrap command will perform an upgrade if needed. You can target a specific toolkit version with tk bootstrap --version=<semver> . Staging workflow \u00b6 Clone the repository with: git clone https://github.com/ $GITHUB_USER /fleet-infra cd fleet-infra Create a git source pointing to a public repository master branch: tk create source git webapp \\ --url = https://github.com/stefanprodan/podinfo \\ --branch = master \\ --interval = 30s \\ --export > ./staging-cluster/webapp-source.yaml Create a kustomization for synchronizing the common manifests on the cluster: tk create kustomization webapp-common \\ --source = webapp \\ --path = \"./deploy/webapp/common\" \\ --prune = true \\ --validate = client \\ --interval = 1h \\ --export > ./staging-cluster/webapp-common.yaml Create a kustomization for the backend service that depends on common: tk create kustomization webapp-backend \\ --depends-on = webapp-common \\ --source = webapp \\ --path = \"./deploy/webapp/backend\" \\ --prune = true \\ --validate = client \\ --interval = 10m \\ --health-check = \"Deployment/backend.webapp\" \\ --health-check-timeout = 2m \\ --export > ./staging-cluster/webapp-backend.yaml Create a kustomization for the frontend service that depends on backend: tk create kustomization webapp-frontend \\ --depends-on = webapp-backend \\ --source = webapp \\ --path = \"./deploy/webapp/frontend\" \\ --prune = true \\ --validate = client \\ --interval = 10m \\ --health-check = \"Deployment/frontend.webapp\" \\ --health-check-timeout = 2m \\ --export > ./staging-cluster/webapp-frontend.yaml Push changes to origin: git add -A && git commit -m \"add staging webapp\" && git push In about 30s the synchronization should start: $ watch tk get kustomizations \u2714 gitops-system last applied revision master/35d5765a1acb9e9ce66cad7274c6fe03eee1e8eb \u2714 webapp-backend reconciling \u2714 webapp-common last applied revision master/f43f9b2eb6766e07f318d266a99d2ec7c940b0cf \u2717 webapp-frontend dependency 'gitops-system/webapp-backend' is not ready When the synchronization finishes you can check that the webapp services are running: $ kubectl -n webapp get deployments,services NAME READY UP-TO-DATE AVAILABLE AGE deployment.apps/backend 1/1 1 1 4m1s deployment.apps/frontend 1/1 1 1 3m31s NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/backend ClusterIP 10.52.10.22 <none> 9898/TCP,9999/TCP 4m1s service/frontend ClusterIP 10.52.9.85 <none> 80/TCP 3m31s Tip From this moment forward, any changes made to the webapp Kubernetes manifests in the master branch will be synchronised with the staging cluster. If a Kubernetes manifest is removed from the webapp repository, the reconciler will remove it from your cluster. If you delete a kustomization from the fleet-infra repo, the reconciler will remove all Kubernetes objects that were previously applied from that kustomization. If you alter the webapp deployment using kubectl edit , the changes will be reverted to match the state described in git. When dealing with an incident, you can pause the recitation of a kustomization with tk suspend kustomization <name> . Once the debugging session is over, you can re-enable the reconciliation with tk resume kustomization <name> . Production bootstrap \u00b6 On production clusters, you may wish to deploy stable releases of an application. When creating a git source instead of a branch, you can specify a git tag or a semver expression. Create the production cluster using Kubernetes kind or set the kubectl context to an existing cluster: kind create cluster --name production kubectl cluster-info --context kind-production Run the bootstrap for the production environment: tk bootstrap github \\ --owner = $GITHUB_USER \\ --repository = fleet-infra \\ --path = prod-cluster \\ --personal Pull the changes locally: git pull Production workflow \u00b6 Create a git source using a semver range to target stable releases: tk create source git webapp \\ --url = https://github.com/stefanprodan/podinfo \\ --tag-semver = \">=4.0.0 <4.0.2\" \\ --interval = 30s \\ --export > ./prod-cluster/webapp-source.yaml Create a kustomization for webapp pointing to the production overlay: tk create kustomization webapp \\ --source = webapp \\ --path = \"./deploy/overlays/production\" \\ --prune = true \\ --validate = client \\ --interval = 10m \\ --health-check = \"Deployment/frontend.production\" \\ --health-check = \"Deployment/backend.production\" \\ --health-check-timeout = 2m \\ --export > ./prod-cluster/webapp-production.yaml Push changes to origin: git add -A && git commit -m \"add prod webapp\" && git push List git sources: $ tk get sources git \u2714 gitops-system last fetched revision master/99072ee132abdead8b7799d7891eae2f524eb73d \u2714 webapp last fetched revision 4.0.1/113360052b3153e439a0cf8de76b8e3d2a7bdf27 The kubectl equivalent is kubectl -n gitops-system get gitrepositories . List kustomization: $ tk get kustomizations \u2714 gitops-system last applied revision master/99072ee132abdead8b7799d7891eae2f524eb73d \u2714 webapp last applied revision 4.0.1/113360052b3153e439a0cf8de76b8e3d2a7bdf27 The kubectl equivalent is kubectl -n gitops-system get kustomizations . If you want to upgrade to the latest 4.x version, you can change the semver expression to: tk create source git webapp \\ --url = https://github.com/stefanprodan/podinfo \\ --tag-semver = \">=4.0.0 <5.0.0\" \\ --interval = 30s \\ --export > ./prod-cluster/webapp-source.yaml git add -A && git commit -m \"update prod webapp\" && git push Trigger a git sync: $ tk sync ks gitops-system --with-source \u25ba annotating source gitops-system \u2714 source annotated \u25ce waiting for git sync \u2714 git sync completed \u2714 fetched revision master/d751ea264d48bf0db8b588d1d08184834ac8fec9 \u25ce waiting for kustomization sync \u2714 kustomization sync completed \u2714 applied revision master/d751ea264d48bf0db8b588d1d08184834ac8fec9 The kubectl equivalent is kubectl -n gitops-system annotate gitrepository/gitops-system source.fluxcd.io/syncAt=\"$(date +%s)\" . Wait for the webapp to be upgraded: $ watch tk get kustomizations \u2714 gitops-system last applied revision master/d751ea264d48bf0db8b588d1d08184834ac8fec9 \u2714 webapp last applied revision 4.0.5/f43f9b2eb6766e07f318d266a99d2ec7c940b0cf","title":"Get Started"},{"location":"get-started/#get-started-with-gitops-toolkit","text":"","title":"Get started with GitOps Toolkit"},{"location":"get-started/#prerequisites","text":"You will need two Kubernetes clusters version 1.14 or newer and kubectl version 1.18. For a quick local test, you can use Kubernetes kind . Any other Kubernetes setup will work as well though. In order to follow the guide you'll need a GitHub account and a personal access token that can create repositories (check all permissions under repo ). Export your GitHub personal access token and username: export GITHUB_TOKEN = <your-token> export GITHUB_USER = <your-username>","title":"Prerequisites"},{"location":"get-started/#install-the-toolkit-cli","text":"To install the latest tk release run: curl -s https://toolkit.fluxcd.io/install.sh | sudo bash The install script downloads the tk binary to /usr/local/bin . Binaries for macOS and Linux AMD64 are available for download on the release page . To configure your shell to load tk completions add to your bash profile: # ~/.bashrc or ~/.bash_profile . < ( tk completion )","title":"Install the toolkit CLI"},{"location":"get-started/#gitops-workflow","text":"You'll be using a dedicated Git repository e.g. fleet-infra to manage one or more Kubernetes clusters. This guide assumes that you have two clusters, one for staging and one for production. Using the toolkit CLI you'll do the following: configure each cluster to synchronise with a directory inside the fleet repository register app sources (git repositories) that contain plain Kubernetes manifests or Kustomize overlays configure app deployments on both clusters (pre-releases on staging, semver releases on production)","title":"GitOps workflow"},{"location":"get-started/#staging-bootstrap","text":"Create the staging cluster using Kubernetes kind or set the kubectl context to an existing cluster: kind create cluster --name staging kubectl cluster-info --context kind-staging Verify that your staging cluster satisfies the prerequisites with: $ tk check --pre \u25ba checking prerequisites \u2714 kubectl 1.18.3 >=1.18.0 \u2714 kubernetes 1.18.2 >=1.14.0 \u2714 prerequisites checks passed Run the bootstrap command: tk bootstrap github \\ --owner = $GITHUB_USER \\ --repository = fleet-infra \\ --path = staging-cluster \\ --personal The bootstrap command creates a repository if one doesn't exist and commits the toolkit components manifests to the master branch at the specified path. Then it configures the target cluster to synchronize with the specified path inside the repository. If you wish to create the repository under a GitHub organization: tk bootstrap github \\ --owner = <organization> \\ --repository = <repo-name> \\ --team = <team1-slug> \\ --team = <team2-slug> \\ --path = staging-cluster Example output: $ tk bootstrap github --owner=gitopsrun --repository=fleet-infra --path=staging-cluster --team=devs \u25ba connecting to github.com \u2714 repository created \u2714 devs team access granted \u2714 repository cloned \u271a generating manifests \u2714 components manifests pushed \u25ba installing components in gitops-system namespace namespace/gitops-system created customresourcedefinition.apiextensions.k8s.io/gitrepositories.source.fluxcd.io created customresourcedefinition.apiextensions.k8s.io/helmcharts.source.fluxcd.io created customresourcedefinition.apiextensions.k8s.io/helmrepositories.source.fluxcd.io created customresourcedefinition.apiextensions.k8s.io/kustomizations.kustomize.fluxcd.io created customresourcedefinition.apiextensions.k8s.io/profiles.kustomize.fluxcd.io created role.rbac.authorization.k8s.io/crd-controller-gitops-system created rolebinding.rbac.authorization.k8s.io/crd-controller-gitops-system created clusterrolebinding.rbac.authorization.k8s.io/cluster-reconciler-gitops-system created service/source-controller created deployment.apps/kustomize-controller created deployment.apps/source-controller created networkpolicy.networking.k8s.io/deny-ingress created Waiting for deployment \"source-controller\" rollout to finish: 0 of 1 updated replicas are available... deployment \"source-controller\" successfully rolled out deployment \"kustomize-controller\" successfully rolled out \u2714 install completed \u25ba configuring deploy key \u2714 deploy key configured \u25ba generating sync manifests \u2714 sync manifests pushed \u25ba applying sync manifests \u25ce waiting for cluster sync \u2714 bootstrap finished If you prefer GitLab, export GITLAB_TOKEN env var and use the command tk bootstrap gitlab . Idempotency It is safe to run the bootstrap command as many times as you want. If the toolkit components are present on the cluster, the bootstrap command will perform an upgrade if needed. You can target a specific toolkit version with tk bootstrap --version=<semver> .","title":"Staging bootstrap"},{"location":"get-started/#staging-workflow","text":"Clone the repository with: git clone https://github.com/ $GITHUB_USER /fleet-infra cd fleet-infra Create a git source pointing to a public repository master branch: tk create source git webapp \\ --url = https://github.com/stefanprodan/podinfo \\ --branch = master \\ --interval = 30s \\ --export > ./staging-cluster/webapp-source.yaml Create a kustomization for synchronizing the common manifests on the cluster: tk create kustomization webapp-common \\ --source = webapp \\ --path = \"./deploy/webapp/common\" \\ --prune = true \\ --validate = client \\ --interval = 1h \\ --export > ./staging-cluster/webapp-common.yaml Create a kustomization for the backend service that depends on common: tk create kustomization webapp-backend \\ --depends-on = webapp-common \\ --source = webapp \\ --path = \"./deploy/webapp/backend\" \\ --prune = true \\ --validate = client \\ --interval = 10m \\ --health-check = \"Deployment/backend.webapp\" \\ --health-check-timeout = 2m \\ --export > ./staging-cluster/webapp-backend.yaml Create a kustomization for the frontend service that depends on backend: tk create kustomization webapp-frontend \\ --depends-on = webapp-backend \\ --source = webapp \\ --path = \"./deploy/webapp/frontend\" \\ --prune = true \\ --validate = client \\ --interval = 10m \\ --health-check = \"Deployment/frontend.webapp\" \\ --health-check-timeout = 2m \\ --export > ./staging-cluster/webapp-frontend.yaml Push changes to origin: git add -A && git commit -m \"add staging webapp\" && git push In about 30s the synchronization should start: $ watch tk get kustomizations \u2714 gitops-system last applied revision master/35d5765a1acb9e9ce66cad7274c6fe03eee1e8eb \u2714 webapp-backend reconciling \u2714 webapp-common last applied revision master/f43f9b2eb6766e07f318d266a99d2ec7c940b0cf \u2717 webapp-frontend dependency 'gitops-system/webapp-backend' is not ready When the synchronization finishes you can check that the webapp services are running: $ kubectl -n webapp get deployments,services NAME READY UP-TO-DATE AVAILABLE AGE deployment.apps/backend 1/1 1 1 4m1s deployment.apps/frontend 1/1 1 1 3m31s NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/backend ClusterIP 10.52.10.22 <none> 9898/TCP,9999/TCP 4m1s service/frontend ClusterIP 10.52.9.85 <none> 80/TCP 3m31s Tip From this moment forward, any changes made to the webapp Kubernetes manifests in the master branch will be synchronised with the staging cluster. If a Kubernetes manifest is removed from the webapp repository, the reconciler will remove it from your cluster. If you delete a kustomization from the fleet-infra repo, the reconciler will remove all Kubernetes objects that were previously applied from that kustomization. If you alter the webapp deployment using kubectl edit , the changes will be reverted to match the state described in git. When dealing with an incident, you can pause the recitation of a kustomization with tk suspend kustomization <name> . Once the debugging session is over, you can re-enable the reconciliation with tk resume kustomization <name> .","title":"Staging workflow"},{"location":"get-started/#production-bootstrap","text":"On production clusters, you may wish to deploy stable releases of an application. When creating a git source instead of a branch, you can specify a git tag or a semver expression. Create the production cluster using Kubernetes kind or set the kubectl context to an existing cluster: kind create cluster --name production kubectl cluster-info --context kind-production Run the bootstrap for the production environment: tk bootstrap github \\ --owner = $GITHUB_USER \\ --repository = fleet-infra \\ --path = prod-cluster \\ --personal Pull the changes locally: git pull","title":"Production bootstrap"},{"location":"get-started/#production-workflow","text":"Create a git source using a semver range to target stable releases: tk create source git webapp \\ --url = https://github.com/stefanprodan/podinfo \\ --tag-semver = \">=4.0.0 <4.0.2\" \\ --interval = 30s \\ --export > ./prod-cluster/webapp-source.yaml Create a kustomization for webapp pointing to the production overlay: tk create kustomization webapp \\ --source = webapp \\ --path = \"./deploy/overlays/production\" \\ --prune = true \\ --validate = client \\ --interval = 10m \\ --health-check = \"Deployment/frontend.production\" \\ --health-check = \"Deployment/backend.production\" \\ --health-check-timeout = 2m \\ --export > ./prod-cluster/webapp-production.yaml Push changes to origin: git add -A && git commit -m \"add prod webapp\" && git push List git sources: $ tk get sources git \u2714 gitops-system last fetched revision master/99072ee132abdead8b7799d7891eae2f524eb73d \u2714 webapp last fetched revision 4.0.1/113360052b3153e439a0cf8de76b8e3d2a7bdf27 The kubectl equivalent is kubectl -n gitops-system get gitrepositories . List kustomization: $ tk get kustomizations \u2714 gitops-system last applied revision master/99072ee132abdead8b7799d7891eae2f524eb73d \u2714 webapp last applied revision 4.0.1/113360052b3153e439a0cf8de76b8e3d2a7bdf27 The kubectl equivalent is kubectl -n gitops-system get kustomizations . If you want to upgrade to the latest 4.x version, you can change the semver expression to: tk create source git webapp \\ --url = https://github.com/stefanprodan/podinfo \\ --tag-semver = \">=4.0.0 <5.0.0\" \\ --interval = 30s \\ --export > ./prod-cluster/webapp-source.yaml git add -A && git commit -m \"update prod webapp\" && git push Trigger a git sync: $ tk sync ks gitops-system --with-source \u25ba annotating source gitops-system \u2714 source annotated \u25ce waiting for git sync \u2714 git sync completed \u2714 fetched revision master/d751ea264d48bf0db8b588d1d08184834ac8fec9 \u25ce waiting for kustomization sync \u2714 kustomization sync completed \u2714 applied revision master/d751ea264d48bf0db8b588d1d08184834ac8fec9 The kubectl equivalent is kubectl -n gitops-system annotate gitrepository/gitops-system source.fluxcd.io/syncAt=\"$(date +%s)\" . Wait for the webapp to be upgraded: $ watch tk get kustomizations \u2714 gitops-system last applied revision master/d751ea264d48bf0db8b588d1d08184834ac8fec9 \u2714 webapp last applied revision 4.0.5/f43f9b2eb6766e07f318d266a99d2ec7c940b0cf","title":"Production workflow"},{"location":"internal/release/","text":"Release \u00b6 To release a new version the following steps should be followed: Create a <next semver> tag form master and push it to remote. Confirm CI builds and releases the newly tagged version.","title":"Release"},{"location":"internal/release/#release","text":"To release a new version the following steps should be followed: Create a <next semver> tag form master and push it to remote. Confirm CI builds and releases the newly tagged version.","title":"Release"},{"location":"roadmap/","text":"Roadmap \u00b6 Work in Progress We will be building the roadmap together with the Flux community, our end-users and everyone who is interested in integrating with us. So a lot of this is still TBD - read this as our shopping list of ideas after some brainstorming as Flux maintainers. The road to Flux v2 \u00b6 Flux read-only feature parity \u00b6 This would be the first stepping stone: we want the GitOps Toolkit to be on-par with today's Flux in read-only mode and FluxCloud notifications. Goals Offer an in-place migration tool for those that are using Flux in read-only mode to synchronize plain manifests Offer a migration guide for those that are using Flux in read-only mode to synchronize Kustomize overlays Offer a dedicated component for forwarding events to external messaging platforms Non-Goals Migrate users that are using Flux to run custom scripts with flux.yaml Automate the migration of flux.yaml kustomize users Tasks Review the git source and kustomize APIs Design the events API Implement events in source and kustomize controllers Implement Prometheus metrics in source and kustomize controllers Make the kustomize-controller apply/gc events on-par with Flux v1 apply events Design the notifications and events filtering API Implement a notification controller for Slack, MS Teams, Discord, Rocket Implement the migration command in tk Create a migration guide for flux.yaml kustomize users Flux image update feature parity \u00b6 Goals Offer a dedicated component that can replace Flux v1 image update feature Non-Goals Maintain backwards compatibility with Flux v1 annotations Tasks Design the Git push API Implement Git push in source controller Design the image scanning API Implement an image scanning controller Design the manifests patching component Implement the image scan/patch/push workflow Integrate the new components in the toolkit assembler Create a migration guide from Flux annotations The road to Helm Operator v2 \u00b6 Helm v3 feature parity \u00b6 Goals Offer a migration guide for those that are using Helm Operator with Helm v3 and Helm repositories Non-Goals Migrate users that are using Helm v2 Migrate users that are using Helm charts from Git Tasks Review the Helm release, chart and repository APIs Design Helm releases based on source API Implement a Helm controller for Helm v3 covering all the current release options Implement events in Helm controller Implement Prometheus metrics in Helm controller Create a migration guide for Helm Operator users","title":"Roadmap"},{"location":"roadmap/#roadmap","text":"Work in Progress We will be building the roadmap together with the Flux community, our end-users and everyone who is interested in integrating with us. So a lot of this is still TBD - read this as our shopping list of ideas after some brainstorming as Flux maintainers.","title":"Roadmap"},{"location":"roadmap/#the-road-to-flux-v2","text":"","title":"The road to Flux v2"},{"location":"roadmap/#flux-read-only-feature-parity","text":"This would be the first stepping stone: we want the GitOps Toolkit to be on-par with today's Flux in read-only mode and FluxCloud notifications. Goals Offer an in-place migration tool for those that are using Flux in read-only mode to synchronize plain manifests Offer a migration guide for those that are using Flux in read-only mode to synchronize Kustomize overlays Offer a dedicated component for forwarding events to external messaging platforms Non-Goals Migrate users that are using Flux to run custom scripts with flux.yaml Automate the migration of flux.yaml kustomize users Tasks Review the git source and kustomize APIs Design the events API Implement events in source and kustomize controllers Implement Prometheus metrics in source and kustomize controllers Make the kustomize-controller apply/gc events on-par with Flux v1 apply events Design the notifications and events filtering API Implement a notification controller for Slack, MS Teams, Discord, Rocket Implement the migration command in tk Create a migration guide for flux.yaml kustomize users","title":"Flux read-only feature parity"},{"location":"roadmap/#flux-image-update-feature-parity","text":"Goals Offer a dedicated component that can replace Flux v1 image update feature Non-Goals Maintain backwards compatibility with Flux v1 annotations Tasks Design the Git push API Implement Git push in source controller Design the image scanning API Implement an image scanning controller Design the manifests patching component Implement the image scan/patch/push workflow Integrate the new components in the toolkit assembler Create a migration guide from Flux annotations","title":"Flux image update feature parity"},{"location":"roadmap/#the-road-to-helm-operator-v2","text":"","title":"The road to Helm Operator v2"},{"location":"roadmap/#helm-v3-feature-parity","text":"Goals Offer a migration guide for those that are using Helm Operator with Helm v3 and Helm repositories Non-Goals Migrate users that are using Helm v2 Migrate users that are using Helm charts from Git Tasks Review the Helm release, chart and repository APIs Design Helm releases based on source API Implement a Helm controller for Helm v3 covering all the current release options Implement events in Helm controller Implement Prometheus metrics in Helm controller Create a migration guide for Helm Operator users","title":"Helm v3 feature parity"}]}